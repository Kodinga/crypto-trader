{"version":3,"sources":["core/transport/types/ConnectionStatus.ts","core/transport/actions.ts","modules/redux/utils.ts","modules/selection/actions.ts","core/transport/middleware.ts","core/transport/WsConnectionProxy.ts","core/transport/Connection.ts","modules/reference-data/actions.ts","modules/reference-data/selectors.ts","modules/reference-data/utils.ts","modules/ticker/actions.ts","modules/app/actions.ts","modules/trades/actions.ts","modules/app/epics.ts","core/transport/epics.ts","modules/candles/actions.ts","core/transport/selectors.ts","modules/trades/epics.ts","modules/reference-data/epics.ts","modules/ticker/epics.ts","modules/book/actions.ts","modules/candles/epics.ts","modules/selection/selectors.ts","modules/selection/epics.ts","modules/book/epics.ts","core/transport/utils.ts","modules/trades/reducer.ts","core/transport/reducer.ts","modules/reference-data/reducer.ts","modules/ticker/reducer.ts","modules/candles/reducer.ts","modules/selection/reducer.ts","modules/book/reducer.ts","modules/root.ts","modules/redux/store.ts","core/hooks/useThrottle.ts","modules/ag-grid/agGridFormatter.ts","modules/trades/components/Trades/Trades.styled.ts","theme/style.ts","modules/trades/components/Trades/Trades.tsx","modules/trades/selectors.ts","modules/trades/components/Trades/index.ts","modules/trades/components/Trades/Trades.container.tsx","modules/ticker/components/Tickers/Tickers.styled.ts","modules/ticker/selectors.ts","modules/ticker/components/Ticker/Ticker.styled.ts","core/components/update-highlight/UpdateHightlight.styled.ts","core/components/update-highlight/UpdateHighlight.tsx","core/hooks/usePrevious.ts","core/components/trend-indicator/TrendIndicator.styled.ts","core/components/trend-indicator/index.ts","core/components/trend-indicator/TrendIndicator.tsx","modules/ticker/components/Ticker/Ticker.tsx","modules/ticker/components/Ticker/index.ts","modules/ticker/components/Ticker/Ticker.container.ts","modules/ticker/components/Tickers/Tickers.tsx","modules/ticker/components/Tickers/index.ts","modules/ticker/components/Tickers/Tickers.container.ts","modules/candles/components/CandlesChart/CandlesChart.styled.ts","theme/Highstock.ts","modules/candles/components/CandlesChart/CandlesChart.tsx","modules/candles/selectors.ts","modules/candles/components/CandlesChart/index.ts","modules/candles/components/CandlesChart/CandlesChart.container.tsx","modules/book/components/Book/Book.styled.ts","modules/book/components/Book/Book.tsx","modules/book/selectors.ts","modules/book/components/Book/index.ts","modules/book/components/Book/Book.container.tsx","modules/book/components/DepthChart/DepthChart.styled.ts","theme/Highchart.ts","modules/book/components/DepthChart/DepthChart.tsx","modules/book/components/DepthChart/index.ts","modules/book/components/DepthChart/DepthChart.container.tsx","core/components/widget/Widget.styled.ts","core/components/widget/index.ts","core/components/widget/Widget.tsx","core/components/Diagnostics/Diagnostics.styled.ts","core/components/Diagnostics/index.ts","core/components/Diagnostics/Diagnostics.tsx","App.styled.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ConnectionStatus","TRANSPORT_ACTION_TYPES","createAction","type","payload","meta","createReducer","handlers","initialState","state","action","hasOwnProperty","SELECTION_ACTION_TYPES","TransportActions","sendMessage","SEND_MESSAGE","receiveMessage","RECEIVE_MESSAGE","changeConnectionStatus","CHANGE_CONNECTION_STATUS","subscribeToChannel","SUBSCRIBE_TO_CHANNEL","subscribeToChannelAck","SUBSCRIBE_TO_CHANNEL_ACK","subscribeToChannelNack","SUBSCRIBE_TO_CHANNEL_NACK","unsubscribeFromChannel","UNSUBSCRIBE_FROM_CHANNEL","unsubscribeFromChannelAck","UNSUBSCRIBE_FROM_CHANNEL_ACK","unsubscribeFromChannelNack","UNSUBSCRIBE_FROM_CHANNEL_NACK","createWsMiddleware","connection","store","next","onReceive","data","parsedData","JSON","parse","undefined","channelId","Array","isArray","chanId","getState","subscriptions","WsConnectionProxy","realm","socket","onConnectFn","onReceivedFn","onErrorFn","this","WebSocket","onopen","onmessage","onerror","error","Error","message","send","callback","Connection","connectionProxy","start","stop","onConnect","onReceived","REF_DATA_ACTION_TYPES","SelectionActions","selectCurrencyPair","SELECT_CURRENCY_PAIR","getCurrencyPairs","createSelector","refData","currencyPairs","RefDataActions","loadRefData","LOAD_REF_DATA","loadRefDataAck","LOAD_REF_DATA_ACK","loadRefDataNack","LOAD_REF_DATA_NACK","parseCurrencyPair","currencyPair","slice","formatCurrencyPair","join","TICKER_ACTION_TYPES","formatPrice","price","Number","toFixed","APP_ACTION_TYPES","TickerActions","subscribeToTicker","SUBSCRIBE_TO_TICKER","TRADES_ACTION_TYPES","AppActions","bootstrapApp","BOOTSTRAP_APP","combineEpics","action$","state$","pipe","ofType","switchMap","console","log","connect","filter","Connected","merge","of","take","mergeMap","value","tickerActions","map","symbol","from","counter","ticker","distinctUntilChanged","tap","document","title","lastPrice","EMPTY","stringify","concatMap","rootAction","isSubscribing","event","channel","timeout","receiveMessageAction","msg","request","catchError","CANDLES_ACTION_TYPES","TradesActions","subscribeToTrades","SUBSCRIBE_TO_TRADES","unsubscribeFromTrades","UNSUBSCRIBE_FROM_TRADES","getSubscriptions","getSubscription","Object","keys","find","every","key","result","push","warn","fromFetch","response","json","BOOK_ACTION_TYPES","CandlesActions","subscribeToCandles","SUBSCRIBE_TO_CANDLES","unsubscribeFromCandles","UNSUBSCRIBE_FROM_CANDLES","timeframe","BookActions","subscribeToBook","SUBSCRIBE_TO_BOOK","unsubscribeFromBook","UNSUBSCRIBE_FROM_BOOK","getCurrencyPair","selection","statePairs$","pairwise","withLatestFrom","oldState","oldCurrencyPair","unsubscribeActions","subscribeActions","prec","isHeartbeat","isSubscriptionMessage","isUnsubscriptionMessage","isErrorMessage","snapshotReducer","sort","a","b","id","timestamp","amount","updateReducer","trade","existingTradeIndex","findIndex","x","newOrUpdatedTrade","updatedState","splice","tradesReducer","subscriptionsReducer","refDataReducer","tickerReducer","bid","bidSize","ask","askSize","dailyChange","dailyChangeRelative","volume","high","low","open","close","candle","candlesReducer","split","selectionReducer","order","existingOrderIndex","newOrUpdatedOrder","bookReducer","rootEpic","appEpics","refDataEpics","transportEpics","tradeEpics","tickerEpics","candlesEpics","selectionEpics","bookEpics","rootReducer","combineReducers","trades","candles","book","dependencies","epicMiddleware","createEpicMiddleware","wsMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","useThrottleFn","fn","ms","throttledFn","useMemo","throttle","useEffect","cancel","useThrottle","useState","throttledValue","setThrottledValue","setThrottledValueThrottled","priceFormatter","params","Container","styled","div","Palette","Bid","Ask","Positive","Negative","Orange","White","BackgroundColor","Label","Border","LightGray","Trades","props","throttledTrades","columnDefs","headerName","field","hide","valueFormatter","Math","abs","toString","cellStyle","color","DateTime","fromMillis","toLocaleString","TIME_24_WITH_SECONDS","className","rowData","deltaRowDataMode","getRowNodeId","onGridReady","api","sizeColumnsToFit","getTrades","memoize","getTicker","isActive","CurrencyPair","Price","RelativeChange","isPositive","Change","Content","IdenticalPart","UpdateHighlight","changedPartRef","createRef","prev","val","ref","useRef","current","usePrevious","identicalPart","changedPart","setParts","prevValue","length","min","index","i","calculateParts","animation","animate","duration","iterations","timeoutId","setTimeout","clearTimeout","Icon","TrendIndicator","isHidden","setIsHidden","icon","Ticker","onClick","isPositiveChange","percentChange","selectedCurrencyPair","dispatch","ownProps","Tickers","Highcharts","colors","chart","backgroundColor","stops","xAxis","labels","style","lineColor","minorGridLineColor","tickColor","yAxis","gridLineColor","tickWidth","tooltip","borderColor","plotOptions","series","dataLabels","fontSize","marker","boxplot","fillColor","candlestick","errorbar","legend","itemStyle","itemHoverStyle","itemHiddenStyle","credits","drilldown","activeAxisLabelStyle","activeDataLabelStyle","navigation","buttonOptions","symbolStroke","theme","fill","rangeSelector","buttonTheme","stroke","states","hover","select","inputBoxBorderColor","inputStyle","labelStyle","navigator","handles","outlineColor","maskFill","scrollbar","barBackgroundColor","barBorderColor","buttonArrowColor","buttonBackgroundColor","buttonBorderColor","rifleColor","trackBackgroundColor","trackBorderColor","CandlesChart","time","useUTC","align","text","height","lineWidth","resize","enabled","top","offset","name","selected","buttons","count","chartOptions","setChartOptions","ohlc","rest","volumes","upColor","column","highcharts","options","constructorType","getCandles","Book","orders","throttledOrders","bookSelector","getBook","rawBook","bids","asks","maxDepth","max","range","depth","getPricePoints","uniq","computeDepth","pricePoints","orderFilter","reduce","acc","getDepth","bidPrices","askPrices","pricePoint","DepthChart","throttledDepth","autoRotation","area","categories","step","formatter","parseFloat","Header","Body","Widget","children","Diagnostics","delay","setDelay","intervalId","setInterval","Date","now","clearInterval","TickersPanel","TradesPanel","CandlesPanel","BookPanel","DepthPanel","Footer","App","createStore","applyMiddleware","run","configureStore","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.279d8014.chunk.js","sourcesContent":["export enum ConnectionStatus {\n    Unknown,\n    Connected,\n    Disconnected\n}","import { createAction, ActionUnion } from 'modules/redux/utils';\nimport { ConnectionStatus } from './types/ConnectionStatus';\nimport { TradesChannel, CandlesChannel, TickerChannel, BookChannel } from './types/Channels';\n\nexport enum TRANSPORT_ACTION_TYPES {\n    SEND_MESSAGE = 'TRANSPORT/SEND_MESSAGE',\n    RECEIVE_MESSAGE = 'TRANSPORT/RECEIVE_MESSAGE',\n    CHANGE_CONNECTION_STATUS = 'TRANSPORT/CHANGE_CONNECTION_STATUS',\n    SUBSCRIBE_TO_CHANNEL = 'TRANSPORT/SUBSCRIBE_TO_CHANNEL',\n    SUBSCRIBE_TO_CHANNEL_ACK = 'TRANSPORT/SUBSCRIBE_TO_CHANNEL_ACK',\n    SUBSCRIBE_TO_CHANNEL_NACK = 'TRANSPORT/SUBSCRIBE_TO_CHANNEL_NACK',\n    UNSUBSCRIBE_FROM_CHANNEL= 'TRANSPORT/UNSUBSCRIBE_FROM_CHANNEL',\n    UNSUBSCRIBE_FROM_CHANNEL_ACK = 'TRANSPORT/UNSUBSCRIBE_FROM_CHANNEL_ACK',\n    UNSUBSCRIBE_FROM_CHANNEL_NACK = 'TRANSPORT/UNSUBSCRIBE_FROM_CHANNEL_NACK'\n}\n\ninterface SubscribeToTrades {\n    channel: TradesChannel;\n    symbol: string; \n}\n\ninterface SubscribeToCandles {\n    channel: CandlesChannel;\n    key: string; \n}\n\ninterface SubscribeToTicker {\n    channel: TickerChannel;\n    symbol: string;\n}\n\ninterface SubscribeToBook {\n    channel: BookChannel;\n    symbol: string; \n    prec?: string;\n}\n\nexport type SubscribeToChannelActionPayload = SubscribeToTrades | SubscribeToCandles | SubscribeToTicker | SubscribeToBook;\n\nexport interface SubscribeToChannelAckActionPayload {\n    channel: string;\n    channelId: number;\n    request: any;\n}\n\nexport interface SubscribeToChannelNackActionPayload {\n    error: string;\n}\n\nexport interface ReceiveMessageActionMeta {\n    channel: string;\n    request?: any;\n}\n\nexport interface UnsubscribeFromChannelActionPayload {\n    channelId: number;\n}\n\nexport interface UnsubscribeFromChannelAckActionPayload {\n    channelId: number;\n}\n\nexport const TransportActions = {\n    sendMessage: createAction<TRANSPORT_ACTION_TYPES.SEND_MESSAGE, any>(TRANSPORT_ACTION_TYPES.SEND_MESSAGE),\n    receiveMessage: createAction<TRANSPORT_ACTION_TYPES.RECEIVE_MESSAGE, any, ReceiveMessageActionMeta | undefined>(TRANSPORT_ACTION_TYPES.RECEIVE_MESSAGE),\n    changeConnectionStatus: createAction<TRANSPORT_ACTION_TYPES.CHANGE_CONNECTION_STATUS, ConnectionStatus>(TRANSPORT_ACTION_TYPES.CHANGE_CONNECTION_STATUS),\n    subscribeToChannel: createAction<TRANSPORT_ACTION_TYPES.SUBSCRIBE_TO_CHANNEL, SubscribeToChannelActionPayload>(TRANSPORT_ACTION_TYPES.SUBSCRIBE_TO_CHANNEL),\n    subscribeToChannelAck: createAction<TRANSPORT_ACTION_TYPES.SUBSCRIBE_TO_CHANNEL_ACK, SubscribeToChannelAckActionPayload>(TRANSPORT_ACTION_TYPES.SUBSCRIBE_TO_CHANNEL_ACK),\n    subscribeToChannelNack: createAction<TRANSPORT_ACTION_TYPES.SUBSCRIBE_TO_CHANNEL_NACK, SubscribeToChannelNackActionPayload>(TRANSPORT_ACTION_TYPES.SUBSCRIBE_TO_CHANNEL_NACK),\n    unsubscribeFromChannel: createAction<TRANSPORT_ACTION_TYPES.UNSUBSCRIBE_FROM_CHANNEL, UnsubscribeFromChannelActionPayload>(TRANSPORT_ACTION_TYPES.UNSUBSCRIBE_FROM_CHANNEL),\n    unsubscribeFromChannelAck: createAction<TRANSPORT_ACTION_TYPES.UNSUBSCRIBE_FROM_CHANNEL_ACK, UnsubscribeFromChannelAckActionPayload>(TRANSPORT_ACTION_TYPES.UNSUBSCRIBE_FROM_CHANNEL_ACK),\n    unsubscribeFromChannelNack: createAction<TRANSPORT_ACTION_TYPES.UNSUBSCRIBE_FROM_CHANNEL_NACK>(TRANSPORT_ACTION_TYPES.UNSUBSCRIBE_FROM_CHANNEL_NACK),\n};\n\nexport type TransportActions = ActionUnion<typeof TransportActions>;\nexport type ReceiveMessage = ReturnType<typeof TransportActions.receiveMessage>;\nexport type SendMessage = ReturnType<typeof TransportActions.sendMessage>;\nexport type ChangeConnectionStatus = ReturnType<typeof TransportActions.changeConnectionStatus>;\nexport type SubscribeToChannel = ReturnType<typeof TransportActions.subscribeToChannel>;\nexport type SubscribeToChannelAck = ReturnType<typeof TransportActions.subscribeToChannelAck>;\nexport type SubscribeToChannelNack = ReturnType<typeof TransportActions.subscribeToChannelNack>;\nexport type UnsubscribeFromChannel = ReturnType<typeof TransportActions.unsubscribeFromChannel>;\nexport type UnsubscribeFromChannelAck = ReturnType<typeof TransportActions.unsubscribeFromChannelAck>;\nexport type UnsubscribeFromChannelNack = ReturnType<typeof TransportActions.unsubscribeFromChannelNack>;","import { ActionCreatorsMapObject } from 'redux';\n\nexport interface Action<T extends string> {\n    type: T;\n};\n\nexport interface ActionWithPayload<T extends string, P> extends Action<T> {\n    payload: P;\n}\n\nexport interface ActionWithPayloadAndMeta<T extends string, P, M> extends ActionWithPayload<T, P> {\n    meta: M;\n}\n\ntype ActionFn<T extends string> = () => Action<T>;\n\ntype ActionWithPayloadFn<T extends string, P> = (payload: P) => ActionWithPayload<T, P>;\n\ntype ActionWithPayloadAndMetaFn<T extends string, P, M> = (payload: P, meta: M) => ActionWithPayloadAndMeta<T, P, M>;\n\nexport function createAction<T extends string>(type: T): ActionFn<T>;\n\nexport function createAction<T extends string, P>(type: T): ActionWithPayloadFn<T, P>;\n\nexport function createAction<T extends string, P, M>(type: T): ActionWithPayloadAndMetaFn<T, P, M>;\n\nexport function createAction(type: string) {\n    return (payload?: any, meta?: any) => {\n        if (typeof payload === 'undefined') {\n            return { type };\n        }\n        if (typeof meta === 'undefined') {\n            return {\n                type,\n                payload\n            };\n        }\n\n        return {\n            type,\n            payload,\n            meta\n        };\n    }\n};\n\nexport type ActionUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>;\n\ntype ReducerMap<S, A> = A extends ActionWithPayloadAndMeta<infer T, infer P, infer M>\n    ? { [key in T]: (state: S, action: ActionWithPayloadAndMeta<T, P, M>) => S }\n    : A extends ActionWithPayload<infer T, infer P>\n        ? { [key in T]: (state: S, action: ActionWithPayload<T, P>) => S }\n        : A extends Action<infer T>\n            ? {  [key in T]: (state: S, action: Action<T>) => S }\n            : never;\n\nexport function createReducer<S, A extends { type: string }>(\n  handlers: ReducerMap<S, A>,\n  initialState: S,\n) {\n  return function reducer(state = initialState, action: A): S {\n    if (handlers.hasOwnProperty(action.type)) {\n      return handlers[action.type](state, action);\n    } else {\n      return state;\n    }\n  };\n}","import { createAction, ActionUnion } from '../redux/utils';\n\nexport enum SELECTION_ACTION_TYPES {\n    SELECT_CURRENCY_PAIR = 'SELECTION/SELECT_CURRENCY_PAIR'\n}\n\nexport interface SelectCurrencyPairActionPayload {\n    currencyPair: string;\n}\n\nexport const SelectionActions = {\n    selectCurrencyPair: createAction<SELECTION_ACTION_TYPES.SELECT_CURRENCY_PAIR, SelectCurrencyPairActionPayload>(SELECTION_ACTION_TYPES.SELECT_CURRENCY_PAIR)\n};\n\nexport type SelectionActions = ActionUnion<typeof SelectionActions>;\nexport type SelectCurrencyPair = ReturnType<typeof SelectionActions.selectCurrencyPair>;\n\n","import { Middleware, Dispatch } from 'redux';\nimport { Actions } from 'modules/root';\nimport { Connection } from './Connection';\nimport { TransportActions } from './actions';\n\nconst createWsMiddleware = ({ connection }: { connection: Connection }): Middleware => {\n    return store => (next: Dispatch) => {\n        connection.onReceive(data => {\n            const parsedData = JSON.parse(data);\n            let meta = undefined;\n            let channelId = undefined;\n\n            if (Array.isArray(parsedData)) {\n                channelId = parsedData[0];\n            } else if (parsedData.hasOwnProperty('chanId')) {\n                channelId = parsedData.chanId;\n            }\n            if (channelId && store.getState().subscriptions[channelId]) {\n                meta = store.getState().subscriptions[channelId];\n            }\n            next(TransportActions.receiveMessage(parsedData, meta));\n        });\n        return (action: Actions) => next(action);\n    };\n}\n\nexport default createWsMiddleware;","import { ConnectionProxy } from './types/ConnectionProxy';\n\nexport class WsConnectionProxy implements ConnectionProxy {\n    private socket?: WebSocket;\n    private onConnectFn?: () => void;\n    private onReceivedFn?: (data?: any) => void;\n    private onErrorFn?: (error: any) => void;\n\n    constructor(private realm: string) {\n        this.socket = undefined;\n        this.onReceivedFn = undefined;\n    }\n\n    start(): void {\n        this.socket = new WebSocket(this.realm);\n        this.socket.onopen = () => this.onConnectFn && this.onConnectFn();\n        this.socket.onmessage = ({ data }) => {\n            this.onReceivedFn && this.onReceivedFn(data);\n        }\n        this.socket.onerror = error => this.onErrorFn && this.onErrorFn(error);\n    }\n\n    stop(): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    send(message: any): void {\n        if (this.socket) {\n            this.socket.send(message);\n        }\n    }\n\n    onConnect(callback: () => void): void {\n        this.onConnectFn = callback;\n    }\n\n    onReceived(callback: (data: any) => void): void {\n        this.onReceivedFn = callback;\n    }\n\n    onError(callback: (error: any) => void): void {\n        this.onErrorFn = callback;\n    }\n\n}","import { ConnectionProxy } from './types/ConnectionProxy';\n\nexport class Connection {\n    constructor(private connectionProxy: ConnectionProxy) {\n    }\n\n    connect() {\n        this.connectionProxy.start();\n    }\n\n    disconnect() {\n        this.connectionProxy.stop();\n    }\n\n    send(message: any): void {\n        this.connectionProxy.send(message);\n    }\n\n    onConnect(callback: () => void) {\n        this.connectionProxy.onConnect(callback);\n    }\n\n    onReceive(callback: (data: any) => void) {\n        this.connectionProxy.onReceived(callback);\n    }\n}\n","import { createAction, ActionUnion } from 'modules/redux/utils';\n\nexport enum REF_DATA_ACTION_TYPES {\n    LOAD_REF_DATA = 'REF_DATA/LOAD_REF_DATA',\n    LOAD_REF_DATA_ACK = 'REF_DATA/LOAD_REF_DATA_ACK',\n    LOAD_REF_DATA_NACK = 'REF_DATA/LOAD_REF_DATA_NACK'\n}\n\ninterface RefDataLoadAckActionPayload {\n    currencyPairs: string[];\n}\n\nexport const RefDataActions = {\n    loadRefData: createAction<REF_DATA_ACTION_TYPES.LOAD_REF_DATA>(REF_DATA_ACTION_TYPES.LOAD_REF_DATA),\n    loadRefDataAck: createAction<REF_DATA_ACTION_TYPES.LOAD_REF_DATA_ACK, RefDataLoadAckActionPayload>(REF_DATA_ACTION_TYPES.LOAD_REF_DATA_ACK),\n    loadRefDataNack: createAction<REF_DATA_ACTION_TYPES.LOAD_REF_DATA_NACK>(REF_DATA_ACTION_TYPES.LOAD_REF_DATA_NACK),\n};\n\nexport type RefDataActions = ActionUnion<typeof RefDataActions>;\nexport type LoadRefData = ReturnType<typeof RefDataActions.loadRefData>;\nexport type LoadRefDataAck = ReturnType<typeof RefDataActions.loadRefDataAck>;\nexport type LoadRefDataNack = ReturnType<typeof RefDataActions.loadRefDataNack>;","import { createSelector } from 'reselect';\nimport { RootState } from 'modules/root';\n\nconst refDataSelector = (state: RootState) => state.refData;\n\nexport const getCurrencyPairs = createSelector(\n    refDataSelector,\n    refData => refData.currencyPairs\n);\n","export type Base = string;\nexport type Counter = string;\n\nexport function parseCurrencyPair(currencyPair: string): [Base, Counter] {\n    if (typeof currencyPair === 'undefined') {\n        return ['', ''];\n    }\n    const base = currencyPair.slice(0, 3);\n    const counter = currencyPair.slice(3);\n    return [base, counter];\n}\n\nexport function formatCurrencyPair(currencyPair: string): string {\n    const [base, counter] = parseCurrencyPair(currencyPair);\n    return [base, counter].join(' / ');\n}\n\nexport const formatPrice = (price: number | string | undefined) => {\n    return typeof price === 'undefined' || price === '' ? '' : Number(price).toFixed(2);\n}","import { createAction, ActionUnion } from '../redux/utils';\n\nexport enum TICKER_ACTION_TYPES {\n    SUBSCRIBE_TO_TICKER = 'TICKER/SUBSCRIBE_TO_TICKER'\n}\n\nexport interface SubscribeToTickerActionPayload {\n    symbol: string;\n}\n\nexport const TickerActions = {\n    subscribeToTicker: createAction<TICKER_ACTION_TYPES.SUBSCRIBE_TO_TICKER, SubscribeToTickerActionPayload>(TICKER_ACTION_TYPES.SUBSCRIBE_TO_TICKER)\n};\n\nexport type TickerActions = ActionUnion<typeof TickerActions>;\nexport type SubscribeToTickerAction = ReturnType<typeof TickerActions.subscribeToTicker>;\n\n","import { createAction, ActionUnion } from '../redux/utils';\n\nexport enum APP_ACTION_TYPES {\n    BOOTSTRAP_APP = 'APP/BOOTSTRAP_APP'\n}\n\nexport const AppActions = {\n    bootstrapApp: createAction<APP_ACTION_TYPES.BOOTSTRAP_APP>(APP_ACTION_TYPES.BOOTSTRAP_APP)\n};\n\nexport type AppActions = ActionUnion<typeof AppActions>;\nexport type BoostrapApp = ReturnType<typeof AppActions.bootstrapApp>;\n\n","import { createAction, ActionUnion } from '../redux/utils';\n\nexport enum TRADES_ACTION_TYPES {\n    SUBSCRIBE_TO_TRADES = 'TRADES/SUBSCRIBE_TO_TRADES',\n    UNSUBSCRIBE_FROM_TRADES = 'TRADES/UNSUBSCRIBE_FROM_TRADES'\n}\n\nexport interface SubscribeToTradesActionPayload {\n    symbol: string;\n}\n\nexport interface UnsubscribeFromTradesActionPayload {\n    symbol: string;\n}\n\nexport const TradesActions = {\n    subscribeToTrades: createAction<TRADES_ACTION_TYPES.SUBSCRIBE_TO_TRADES, SubscribeToTradesActionPayload>(TRADES_ACTION_TYPES.SUBSCRIBE_TO_TRADES),\n    unsubscribeFromTrades: createAction<TRADES_ACTION_TYPES.UNSUBSCRIBE_FROM_TRADES, UnsubscribeFromTradesActionPayload>(TRADES_ACTION_TYPES.UNSUBSCRIBE_FROM_TRADES)\n};\n\nexport type TradesActions = ActionUnion<typeof TradesActions>;\nexport type SubscribeToTrades = ReturnType<typeof TradesActions.subscribeToTrades>;\nexport type UnsubscribeFromTrades = ReturnType<typeof TradesActions.unsubscribeFromTrades>;\n","import { SELECTION_ACTION_TYPES, SelectCurrencyPair } from './../selection/actions';\nimport { merge, of, from, EMPTY } from 'rxjs';\nimport { Epic, ofType, combineEpics } from 'redux-observable';\nimport { switchMap, take, mergeMap, filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\nimport { Actions } from 'modules/root';\nimport { ConnectionStatus } from 'core/transport/types/ConnectionStatus';\nimport { getCurrencyPairs } from 'modules/reference-data/selectors';\nimport { RefDataActions, REF_DATA_ACTION_TYPES } from 'modules/reference-data/actions';\nimport { Dependencies } from 'modules/redux/store';\nimport { SelectionActions } from 'modules/selection/actions';\nimport { TRANSPORT_ACTION_TYPES, ChangeConnectionStatus } from 'core/transport/actions';\nimport { parseCurrencyPair } from 'modules/reference-data/utils';\nimport { TickerActions } from 'modules/ticker/actions';\nimport { RootState } from './../root';\nimport { APP_ACTION_TYPES, BoostrapApp } from './actions';\nimport { LoadRefDataAck } from './../reference-data/actions';\n\nconst bootstrap: Epic<Actions, Actions, RootState, Dependencies> = (action$, state$, { connection }) =>\n  action$.pipe(\n    ofType<Actions, BoostrapApp>(APP_ACTION_TYPES.BOOTSTRAP_APP),\n    switchMap(() => {\n      console.log('Bootstrap App');\n      connection.connect();\n\n      return action$.pipe(\n        ofType<Actions, ChangeConnectionStatus>(TRANSPORT_ACTION_TYPES.CHANGE_CONNECTION_STATUS),\n        filter(action => action.payload === ConnectionStatus.Connected),\n        switchMap(() => merge(\n          of(RefDataActions.loadRefData()),\n          action$.pipe(\n            ofType<Actions, LoadRefDataAck>(REF_DATA_ACTION_TYPES.LOAD_REF_DATA_ACK),\n            take(1),\n            mergeMap(() => {\n              const currencyPairs = getCurrencyPairs(state$.value);\n              const tickerActions = currencyPairs\n                .map(currencyPair => TickerActions.subscribeToTicker({\n                  symbol: currencyPair\n                }));\n              return merge(\n                of(SelectionActions.selectCurrencyPair({ currencyPair: currencyPairs[0] })),\n                from(tickerActions)\n              );\n            })\n          )\n        )));\n    })\n  );\n\nconst updateTitle: Epic<Actions, Actions, RootState, Dependencies> = (action$, state$) =>\n  action$\n    .pipe(\n      ofType(SELECTION_ACTION_TYPES.SELECT_CURRENCY_PAIR),\n      switchMap(action => {\n        const { currencyPair } = (action as SelectCurrencyPair).payload;\n        const [, counter] = parseCurrencyPair(currencyPair);\n\n        return state$\n          .pipe(\n            map(state => state.ticker[currencyPair]),\n            distinctUntilChanged(),\n            filter(ticker => typeof ticker !== 'undefined'),\n            tap(ticker => document.title = `(${ticker.lastPrice?.toFixed(2)} ${counter}) Crypto Trader`),\n            mergeMap(() => EMPTY)\n          );\n      })\n    );\n\nexport default combineEpics(\n  bootstrap,\n  updateTitle\n);","import { EMPTY, merge } from 'rxjs';\nimport { Epic, ofType, combineEpics } from 'redux-observable';\nimport { filter, mergeMap, catchError, timeout, take, concatMap, map } from 'rxjs/operators';\nimport { of } from 'rxjs/internal/observable/of';\nimport { Dependencies } from 'modules/redux/store';\nimport { RootState, Actions } from 'modules/root';\nimport { TRANSPORT_ACTION_TYPES, SendMessage, ReceiveMessage, TransportActions, SubscribeToChannel, UnsubscribeFromChannel } from './actions';\n\nexport const WS_SUBSCRIPTION_TIMEOUT_IN_MS = 5000;\n\nexport const handleSendMessage: Epic<Actions, Actions, RootState, Dependencies> = (action$, state$, { connection }) =>\n  action$.pipe(\n    ofType<Actions, SendMessage>(TRANSPORT_ACTION_TYPES.SEND_MESSAGE),\n    mergeMap(action => {\n      connection.send(JSON.stringify(action.payload));\n      return EMPTY;\n    })\n  );\n\n/*\n    The Bitfinex WS api appears to have some limitations when it comes to subscriptions.\n    Because requests/responses don't have a correlation id, we can't run concurrent requests safely.\n    Therefore, we queue subscription requests and process them sequencially.\n*/\nexport const handleSubscription: Epic<Actions, Actions, RootState, Dependencies> = (action$) => {\n  return action$.pipe(\n    ofType<Actions, SubscribeToChannel | UnsubscribeFromChannel>(TRANSPORT_ACTION_TYPES.SUBSCRIBE_TO_CHANNEL, TRANSPORT_ACTION_TYPES.UNSUBSCRIBE_FROM_CHANNEL),\n    concatMap(rootAction => {\n      const isSubscribing = rootAction.type === TRANSPORT_ACTION_TYPES.SUBSCRIBE_TO_CHANNEL;\n\n      return merge(\n        action$.pipe(\n          ofType<Actions, ReceiveMessage>(TRANSPORT_ACTION_TYPES.RECEIVE_MESSAGE),\n          filter(action => {\n            return (isSubscribing && action.payload.event === 'subscribed' && action.payload.channel === (rootAction as SubscribeToChannel).payload.channel)\n              || (!isSubscribing && action.payload.event === 'unsubscribed')\n              || action.payload.event === 'error'\n          }),\n          take(1),\n          timeout(WS_SUBSCRIPTION_TIMEOUT_IN_MS),\n          map(action => {\n            const receiveMessageAction = action as ReceiveMessage;\n            if (receiveMessageAction.payload.event === 'error') {\n              return isSubscribing\n                ? TransportActions.subscribeToChannelNack({\n                  error: receiveMessageAction.payload.msg\n                })\n                : TransportActions.unsubscribeFromChannelNack();\n            } else {\n              const { channel, chanId: channelId } = receiveMessageAction.payload;\n\n              return isSubscribing\n                ? TransportActions.subscribeToChannelAck({\n                  channel,\n                  channelId,\n                  request: (rootAction as SubscribeToChannel).payload\n                })\n                : TransportActions.unsubscribeFromChannelAck({\n                  channelId\n                });\n            }\n          }),\n          catchError(() => isSubscribing\n            ? of(TransportActions.subscribeToChannelNack({\n              error: 'Timeout'\n            }))\n            : of(TransportActions.unsubscribeFromChannelNack())\n          )\n        ),\n        isSubscribing\n          ? of(TransportActions.sendMessage({\n            event: 'subscribe',\n            ...(rootAction as SubscribeToChannel).payload\n          }))\n          : of(TransportActions.sendMessage({\n            event: 'unsubscribe',\n            chanId: (rootAction as UnsubscribeFromChannel).payload.channelId\n          }))\n      );\n    }),\n\n  );\n}\n\nexport default combineEpics(\n  handleSendMessage,\n  handleSubscription\n);","import { createAction, ActionUnion } from '../redux/utils';\n\ntype Timeframe = '1m' | '5m' | '15m' | '30m' | '1h' | '3h' | '6h' | '12h' | '1D' | '7D' | '14D' | '1M';\n\nexport enum CANDLES_ACTION_TYPES {\n    SUBSCRIBE_TO_CANDLES = 'CANDLES/SUBSCRIBE_TO_CANDLES',\n    UNSUBSCRIBE_FROM_CANDLES = 'CANDLES/UNSUBSCRIBE_FROM_CANDLES'\n}\n\nexport interface SubscribeToCandlesActionPayload {\n    symbol: string;\n    timeframe: Timeframe;\n}\n\nexport interface UnsubscribeFromCandlesActionPayload {\n    symbol: string;\n    timeframe: Timeframe;\n}\n\nexport const CandlesActions = {\n    subscribeToCandles: createAction<CANDLES_ACTION_TYPES.SUBSCRIBE_TO_CANDLES, SubscribeToCandlesActionPayload>(CANDLES_ACTION_TYPES.SUBSCRIBE_TO_CANDLES),\n    unsubscribeFromCandles: createAction<CANDLES_ACTION_TYPES.UNSUBSCRIBE_FROM_CANDLES, UnsubscribeFromCandlesActionPayload>(CANDLES_ACTION_TYPES.UNSUBSCRIBE_FROM_CANDLES),\n};\n\nexport type CandlesActions = ActionUnion<typeof CandlesActions>;\nexport type SubscribeToCandles = ReturnType<typeof CandlesActions.subscribeToCandles>;\nexport type UnsubscribeFromCandles = ReturnType<typeof CandlesActions.unsubscribeFromCandles>;\n","import { createSelector } from 'reselect';\nimport { RootState } from 'modules/root';\n\nconst subscriptionsSelector = (state: RootState) => state.subscriptions;\n\nexport const getSubscriptions = createSelector(\n    subscriptionsSelector,\n    subscriptions => subscriptions\n)\n\nexport const getSubscription = createSelector(\n    getSubscriptions,\n    subscriptions => (channel: string, request: any) => {\n        const channelIds = Object.keys(subscriptions).map(Number);\n\n        return channelIds.find(channelId => {\n            return subscriptions[channelId].channel === channel\n                && Object.keys(request).every(key => request[key] === subscriptions[channelId].request[key]);\n        });\n    }\n)\n\n","import { UnsubscribeFromTrades } from './actions';\nimport { TradesChannel } from 'core/transport/types/Channels';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { Epic, ofType, combineEpics } from 'redux-observable';\nimport { RootState, Actions } from 'modules/root';\nimport { SubscribeToTrades, TRADES_ACTION_TYPES } from 'modules/trades/actions';\nimport { Dependencies } from './../redux/store';\nimport { TransportActions } from 'core/transport/actions';\nimport { getSubscription } from 'core/transport/selectors';\nimport { from } from 'rxjs';\n\nexport const subscribeToTrades: Epic<Actions, Actions, RootState, Dependencies> = (action$) =>\n    action$.pipe(\n        ofType<Actions, SubscribeToTrades>(TRADES_ACTION_TYPES.SUBSCRIBE_TO_TRADES),\n        map(action => {\n            const { symbol } = action.payload;\n            const msg = {\n                channel: 'trades' as TradesChannel,\n                symbol: `t${symbol}`\n            };\n            return TransportActions.subscribeToChannel(msg);\n        })\n    );\n\nexport const unsubscribeFromTrades: Epic<Actions, Actions, RootState, Dependencies> = (action$, state$) =>\n    action$.pipe(\n        ofType<Actions, UnsubscribeFromTrades>(TRADES_ACTION_TYPES.UNSUBSCRIBE_FROM_TRADES),\n        mergeMap(action => {\n            const { symbol } = action.payload;\n            const result: Actions[] = [];\n            const channelId = getSubscription(state$.value)('trades', {\n                symbol: `t${symbol}`\n            });\n            if (typeof channelId !== 'undefined') {\n                result.push(\n                    TransportActions.unsubscribeFromChannel({\n                        channelId\n                    })\n                );\n            } else {\n                console.warn('Failed to find trades subscription');\n            }\n            return from(result);\n        })\n    );\n\nexport default combineEpics(\n    subscribeToTrades,\n    unsubscribeFromTrades\n);","import { Epic, ofType, combineEpics } from 'redux-observable';\nimport { switchMap, map, catchError } from 'rxjs/operators';\nimport { fromFetch } from 'rxjs/fetch';\nimport { of } from 'rxjs';\nimport { Dependencies } from 'modules/redux/store';\nimport { RootState, Actions } from 'modules/root';\nimport { REF_DATA_ACTION_TYPES, RefDataActions, LoadRefData } from './actions';\n\nexport const loadRefData: Epic<Actions, Actions, RootState, Dependencies> = (action$) =>\n  action$.pipe(\n    ofType<Actions, LoadRefData>(REF_DATA_ACTION_TYPES.LOAD_REF_DATA),\n    switchMap(() => {\n      return fromFetch('data/currencyPairs.json')\n        .pipe(\n          switchMap(response => response.json()),\n          map(result => RefDataActions.loadRefDataAck({\n            currencyPairs: result as string[]\n          })),\n          catchError(() => of(RefDataActions.loadRefDataNack()))\n        );\n    })\n  );\n\n\nexport default combineEpics(\n  loadRefData\n);","import { map } from 'rxjs/operators';\nimport { Epic, ofType, combineEpics } from 'redux-observable';\nimport { TransportActions } from 'core/transport/actions';\nimport { TickerChannel } from 'core/transport/types/Channels';\nimport { RootState, Actions } from 'modules/root';\nimport { SubscribeToTickerAction, TICKER_ACTION_TYPES } from './actions';\nimport { Dependencies } from './../redux/store';\n\nexport const subscribeToTicker: Epic<Actions, Actions, RootState | undefined, Dependencies | undefined> = (action$) =>\n    action$.pipe(\n        ofType<Actions, SubscribeToTickerAction>(TICKER_ACTION_TYPES.SUBSCRIBE_TO_TICKER),\n        map(action => {\n            const { symbol } = action.payload;\n            const msg = {\n                channel: 'ticker' as TickerChannel,\n                symbol: `t${symbol}`\n            };\n            return TransportActions.subscribeToChannel(msg);\n        })\n    );\n\nexport default combineEpics(\n    subscribeToTicker\n);","import { unsubscribeFromBook } from './epics';\nimport { createAction, ActionUnion } from '../redux/utils';\n\nexport enum BOOK_ACTION_TYPES {\n    SUBSCRIBE_TO_BOOK = 'BOOK/SUBSCRIBE_TO_BOOK',\n    UNSUBSCRIBE_FROM_BOOK = 'BOOK/UNSUBSCRIBE_FROM_BOOK'\n}\n\nexport interface SubscribeToBookActionPayload {\n    symbol: string;\n}\n\nexport interface UnsubscribeFromBookActionPayload {\n    symbol: string;\n}\n\nexport const BookActions = {\n    subscribeToBook: createAction<BOOK_ACTION_TYPES.SUBSCRIBE_TO_BOOK, SubscribeToBookActionPayload>(BOOK_ACTION_TYPES.SUBSCRIBE_TO_BOOK),\n    unsubscribeFromBook: createAction<BOOK_ACTION_TYPES.UNSUBSCRIBE_FROM_BOOK, UnsubscribeFromBookActionPayload>(BOOK_ACTION_TYPES.UNSUBSCRIBE_FROM_BOOK)\n};\n\nexport type BookActions = ActionUnion<typeof BookActions>;\nexport type SubscribeToBook = ReturnType<typeof BookActions.subscribeToBook>;\nexport type UnsubscribeFromBook = ReturnType<typeof BookActions.unsubscribeFromBook>;\n","import { from } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { Epic, ofType, combineEpics } from 'redux-observable';\nimport { RootState, Actions } from 'modules/root';\nimport { getSubscription } from 'core/transport/selectors';\nimport { CandlesChannel } from 'core/transport/types/Channels';\nimport { TransportActions } from 'core/transport/actions';\nimport { SubscribeToCandles, CANDLES_ACTION_TYPES, UnsubscribeFromCandles } from './actions';\nimport { Dependencies } from './../redux/store';\n\nexport const subscribeToCandles: Epic<Actions, Actions, RootState | undefined, Dependencies | undefined> = (action$) =>\n    action$.pipe(\n        ofType<Actions, SubscribeToCandles>(CANDLES_ACTION_TYPES.SUBSCRIBE_TO_CANDLES),\n        map(action => {\n            const { symbol, timeframe } = action.payload;\n            const msg = {\n                channel: 'candles' as CandlesChannel,\n                key: ['trade', timeframe, `t${symbol}`].join(':')\n            };\n            return TransportActions.subscribeToChannel(msg);\n        })\n    );\n\n\nexport const unsubscribeFromCandles: Epic<Actions, Actions, RootState, Dependencies> = (action$, state$) =>\n    action$.pipe(\n        ofType<Actions, UnsubscribeFromCandles>(CANDLES_ACTION_TYPES.UNSUBSCRIBE_FROM_CANDLES),\n        mergeMap(action => {\n            const { symbol, timeframe } = action.payload;\n\n            const result: Actions[] = [];\n            const channelId = getSubscription(state$.value)('candles', {\n                key: ['trade', timeframe, `t${symbol}`].join(':')\n            });\n            if (typeof channelId !== 'undefined') {\n                result.push(\n                    TransportActions.unsubscribeFromChannel({\n                        channelId\n                    })\n                );\n            } else {\n                console.warn('Failed to find candles subscription');\n            }\n            return from(result);\n        })\n    );\n\nexport default combineEpics(\n    subscribeToCandles,\n    unsubscribeFromCandles\n);","import { createSelector } from 'reselect';\nimport { RootState } from 'modules/root';\n\nconst selectionSelector = (state: RootState) => state.selection;\n\nexport const getCurrencyPair = createSelector(\n    selectionSelector,\n    selection => selection.currencyPair\n)\n","import { from } from 'rxjs';\nimport { Epic, ofType, combineEpics } from 'redux-observable';\nimport { switchMap, pairwise, withLatestFrom } from 'rxjs/operators';\nimport { Actions } from 'modules/root';\nimport { TradesActions } from 'modules/trades/actions';\nimport { CandlesActions } from 'modules/candles/actions';\nimport { BookActions } from 'modules/book/actions';\nimport { RootState } from './../root';\nimport { Dependencies } from './../redux/store';\nimport { SELECTION_ACTION_TYPES, SelectCurrencyPair } from './actions';\nimport { getCurrencyPair } from './selectors';\n\nconst handleSelection: Epic<Actions, Actions, RootState, Dependencies> = (action$, state$) => {\n  const statePairs$ = state$.pipe(pairwise());\n  return action$.pipe(\n    ofType<Actions, SelectCurrencyPair>(SELECTION_ACTION_TYPES.SELECT_CURRENCY_PAIR),\n    withLatestFrom(statePairs$),\n    switchMap(([action, [oldState, newState]]) => {\n      const oldCurrencyPair = getCurrencyPair(oldState);\n      const { currencyPair } = action.payload;\n      const unsubscribeActions = [];\n      if (oldCurrencyPair) {\n        unsubscribeActions.push(\n          CandlesActions.unsubscribeFromCandles({symbol: oldCurrencyPair, timeframe: '1m'}),\n          TradesActions.unsubscribeFromTrades({ symbol: oldCurrencyPair }),\n          BookActions.unsubscribeFromBook({ symbol: oldCurrencyPair })\n        );\n      }\n\n      const subscribeActions = [\n        CandlesActions.subscribeToCandles({ symbol: currencyPair, timeframe: '1m' }),\n        TradesActions.subscribeToTrades({ symbol: currencyPair }),\n        BookActions.subscribeToBook({ symbol: currencyPair })\n      ]\n\n      return from([\n        ...unsubscribeActions,\n        ...subscribeActions\n      ]);\n\n    })\n  );\n}\n\nexport default combineEpics(\n  handleSelection\n);","import { from } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { Epic, ofType, combineEpics } from 'redux-observable';\nimport { getSubscription } from 'core/transport/selectors';\nimport { TransportActions } from 'core/transport/actions';\nimport { BookChannel } from 'core/transport/types/Channels';\nimport { RootState, Actions } from 'modules/root';\nimport { SubscribeToBook, BOOK_ACTION_TYPES, UnsubscribeFromBook } from './actions';\nimport { Dependencies } from './../redux/store';\n\nexport const subscribeToBook: Epic<Actions, Actions, RootState | undefined, Dependencies | undefined> = (action$) =>\n    action$.pipe(\n        ofType(BOOK_ACTION_TYPES.SUBSCRIBE_TO_BOOK),\n        map(action => {\n            const { symbol } = (action as SubscribeToBook).payload;\n            const msg = {\n                channel: 'book' as BookChannel,\n                symbol: `t${symbol}`,\n                prec: 'R0'\n            };\n            return TransportActions.subscribeToChannel(msg);\n        })\n    );\n\n\nexport const unsubscribeFromBook: Epic<Actions, Actions, RootState, Dependencies> = (action$, state$) =>\naction$.pipe(\n    ofType(BOOK_ACTION_TYPES.UNSUBSCRIBE_FROM_BOOK),\n    mergeMap(action => {\n        const { symbol } = (action as UnsubscribeFromBook).payload;\n        const result: Actions[] = [];\n        const channelId = getSubscription(state$.value)('book', {\n            symbol: `t${symbol}`\n        });\n        if (typeof channelId !== 'undefined') {\n            result.push(\n                TransportActions.unsubscribeFromChannel({\n                    channelId\n                })\n            );\n        } else {\n            console.warn('Failed to find book subscription');\n        }\n        return from(result);\n    })\n);\n\nexport default combineEpics(\n    subscribeToBook,\n    unsubscribeFromBook\n);","import { ReceiveMessage } from './actions';\n\nexport function isHeartbeat(action: ReceiveMessage) {\n    return Array.isArray(action.payload) && action.payload[1] === 'hb';\n}\n\nexport function isSubscriptionMessage(action: ReceiveMessage) {\n    return action.payload.event === 'subscribed';\n}\n\nexport function isUnsubscriptionMessage(action: ReceiveMessage) {\n    return action.payload.event === 'unsubscribed';\n}\n\nexport function isErrorMessage(action: ReceiveMessage) {\n    return action.payload.event === 'error';\n}\n","import { createReducer } from 'modules/redux/utils';\nimport { TRANSPORT_ACTION_TYPES } from 'core/transport/actions';\nimport { isHeartbeat, isSubscriptionMessage, isUnsubscriptionMessage, isErrorMessage } from 'core/transport/utils';\nimport { ReceiveMessage } from 'core/transport/actions';\nimport { Actions } from './../root';\nimport { Trade } from './types/Trade';\n\ntype SymbolState = Trade[];\n\nexport const MAX_TRADES = 100;\n\nexport interface TradesState {\n    [currencyPair: string]: SymbolState;\n}\n\nconst initialState: TradesState = {\n}\n\nfunction snapshotReducer(state: SymbolState, action: ReceiveMessage) {\n    const [, trades] = action.payload;\n    return trades.sort((a: number[], b: number[]) => b[1] - a[1]).map(([id, timestamp, amount, price]: number[]) => ({\n        id,\n        timestamp,\n        amount,\n        price\n    }));\n}\n\nfunction updateReducer(state: SymbolState = [], action: ReceiveMessage) {\n    const [, , trade] = action.payload;\n    const [id, timestamp, amount, price] = trade;\n    const existingTradeIndex = state.findIndex(x => x.id === id);\n    const newOrUpdatedTrade = {\n        id,\n        timestamp,\n        amount,\n        price\n    };\n\n    if (existingTradeIndex >= 0) {\n        const updatedState = state.slice();\n        updatedState.splice(existingTradeIndex, 1, newOrUpdatedTrade);\n        return updatedState;\n    } else {\n        return [\n            newOrUpdatedTrade,\n            ...state\n        ];\n    }\n}\n\nconst receiveMessageReducer = (state: TradesState, action: ReceiveMessage) => {\n    if (isHeartbeat(action) || isSubscriptionMessage(action) || isErrorMessage(action)) {\n        return state;\n    }\n\n    const { channel, request } = action.meta || {};\n    if (channel === 'trades') {\n        const { symbol } = request;    \n        const currencyPair = symbol.slice(1);\n        if (isUnsubscriptionMessage(action)) {\n            const updatedState = {\n                ...state\n            };\n            delete updatedState[currencyPair];\n            return updatedState;\n        }     \n\n        const symbolReducer = Array.isArray(action.payload[1]) ? snapshotReducer : updateReducer;\n        const result = symbolReducer(state[currencyPair], action);\n\n        return {\n            ...state,\n            [currencyPair]: result.slice(0, MAX_TRADES) // only keep the top x trades, so we don't eventually fill up the memory\n        };\n    }\n\n    return state;\n}\n\nexport const tradesReducer = createReducer<TradesState, Actions>({\n    [TRANSPORT_ACTION_TYPES.RECEIVE_MESSAGE]: receiveMessageReducer\n}, initialState);\n\nexport default tradesReducer;","import { createReducer } from 'modules/redux/utils';\nimport { Actions } from 'modules/root';\nimport { TRANSPORT_ACTION_TYPES } from 'core/transport/actions';\nimport { SubscribeToChannelAck, UnsubscribeFromChannelAck } from './actions';\n\nexport interface SubscriptionState {\n    [key: number]: { channel: string, request: any };\n}\n\nconst initialState: SubscriptionState = {\n};\n\nconst subscribeToChannelAckReducer = (state: SubscriptionState, action: SubscribeToChannelAck) => {\n    const { request, channel, channelId } = action.payload;\n\n    return {\n        ...state,\n        [channelId]: {\n            channel,\n            request\n        }\n    };\n};\n\nconst unsubscribeFromChannelAckReducer = (state: SubscriptionState, action: UnsubscribeFromChannelAck) => {\n    const { channelId } = action.payload;\n\n    const updatedState = {\n        ...state\n    };\n    delete updatedState[channelId];\n    return updatedState;\n}\n\nexport const subscriptionsReducer = createReducer<SubscriptionState, Actions>({\n    [TRANSPORT_ACTION_TYPES.SUBSCRIBE_TO_CHANNEL_ACK]: subscribeToChannelAckReducer,\n    [TRANSPORT_ACTION_TYPES.UNSUBSCRIBE_FROM_CHANNEL_ACK]: unsubscribeFromChannelAckReducer\n}, initialState);\n\nexport default subscriptionsReducer;","import { Actions } from 'modules/root';\nimport { REF_DATA_ACTION_TYPES, LoadRefDataAck } from './actions';\nimport { createReducer } from 'modules/redux/utils';\n\ninterface RefDataState {\n    currencyPairs: string[];\n}\n\nconst initialState: RefDataState = {\n    currencyPairs: []\n}\n\nconst loadRefDataReducer = (state: RefDataState, action: LoadRefDataAck) => {\n    const { currencyPairs } = action.payload;\n\n    return {\n        ...state,\n        currencyPairs\n    };\n}\n\nexport const refDataReducer = createReducer<RefDataState, Actions>({\n    [REF_DATA_ACTION_TYPES.LOAD_REF_DATA_ACK]: loadRefDataReducer\n}, initialState);\n\nexport default refDataReducer;","import { createReducer } from 'modules/redux/utils';\nimport { Actions } from './../root';\nimport { TRANSPORT_ACTION_TYPES, ReceiveMessage } from 'core/transport/actions';\nimport { isHeartbeat } from 'core/transport/utils';\nimport { Ticker } from './types/Ticker';\n\nexport interface TickerState {\n    [symbol: string]: Ticker;\n}\n\nconst initialState: TickerState = {\n}\n\nconst receiveMessageReducer = (state: TickerState, action: ReceiveMessage) => {\n    if (isHeartbeat(action)) {\n        return state;\n    }\n\n    const { channel, request } = action.meta || {};\n    if (channel === 'ticker') {\n        const { symbol } = request;                \n        const currencyPair = symbol.slice(1);\n        const [, [bid, bidSize, ask, askSize, dailyChange, dailyChangeRelative, lastPrice, volume, high, low]] = action.payload;\n\n        return {\n            ...state,\n            [currencyPair]: {\n                bid,\n                bidSize,\n                ask,\n                askSize,\n                dailyChange,\n                dailyChangeRelative,\n                lastPrice,\n                volume,\n                high,\n                low\n            }\n        };\n    }\n\n    return state;\n}\n\nexport const tickerReducer = createReducer<TickerState, Actions>({\n    [TRANSPORT_ACTION_TYPES.RECEIVE_MESSAGE]: receiveMessageReducer\n}, initialState);\n\nexport default tickerReducer;","import { createReducer } from 'modules/redux/utils';\nimport { TRANSPORT_ACTION_TYPES } from 'core/transport/actions';\nimport { isHeartbeat, isSubscriptionMessage, isUnsubscriptionMessage, isErrorMessage } from 'core/transport/utils';\nimport { ReceiveMessage } from 'core/transport/actions';\nimport { Actions } from './../root';\nimport { Candle } from './types/Candle';\n\nconst MAX_CANDLES = 1000;\n\ntype SymbolState = Candle[];\n\nexport interface CandlesState {\n    [currencyPair: string]: SymbolState;\n}\n\nconst initialState: CandlesState = {\n}\n\nfunction snapshotReducer(state: SymbolState, action: ReceiveMessage) {\n    const [, candles] = action.payload;\n    return candles.map(([timestamp, open, close, high, low, volume]: number[]) => ({\n        timestamp, open, close, high, low, volume\n    })).sort((a: Candle, b: Candle) => b.timestamp - a.timestamp);\n}\n\nfunction updateReducer(state: SymbolState = [], action: ReceiveMessage) {\n    const [, candle] = action.payload;\n    const [timestamp, open, close, high, low, volume] = candle;\n\n    return [\n        {\n            timestamp,\n            open,\n            close,\n            high,\n            low,\n            volume\n        },\n        ...state\n    ];\n}\n\nconst receiveMessageReducer = (state: CandlesState, action: ReceiveMessage) => {\n    if (isHeartbeat(action) || isSubscriptionMessage(action) || isErrorMessage(action)) {\n        return state;\n    }\n\n    const { channel, request } = action.meta || {};\n    if (channel === 'candles') {\n        const { key } = request;\n        const [, , symbol] = key.split(':');\n        const currencyPair = symbol.slice(1);\n\n        if (isUnsubscriptionMessage(action)) {\n            const updatedState = {\n                ...state\n            };\n            delete updatedState[currencyPair];\n            return updatedState;\n        }\n\n        const symbolReducer = Array.isArray(action.payload[1][0]) ? snapshotReducer : updateReducer;\n        const result = symbolReducer(state[currencyPair], action);\n\n        return {\n            ...state,\n            [currencyPair]: result.slice(0, MAX_CANDLES) // restrict number of candles so we don't eventully fill up the memory\n        };\n    }\n\n    return state;\n}\n\nexport const candlesReducer = createReducer<CandlesState, Actions>({\n    [TRANSPORT_ACTION_TYPES.RECEIVE_MESSAGE]: receiveMessageReducer\n}, initialState);\n\nexport default candlesReducer;","import { Actions } from 'modules/root';\nimport { SELECTION_ACTION_TYPES } from './actions';\n\ninterface SelectionState {\n    currencyPair?: string;\n}\n\nconst initialState: SelectionState = {\n}\n\nexport function selectionReducer(\n    state = initialState,\n    action: Actions\n) {\n    switch (action.type) {\n        case SELECTION_ACTION_TYPES.SELECT_CURRENCY_PAIR: {\n            const { currencyPair } = action.payload;\n\n            return {\n                ...state,\n                currencyPair\n            }\n        }\n\n        default:\n            return state;\n    }\n}\n\nexport default selectionReducer;","import { Actions } from 'modules/root';\nimport { TRANSPORT_ACTION_TYPES } from 'core/transport/actions';\nimport { createReducer } from 'modules/redux/utils';\nimport { isHeartbeat, isSubscriptionMessage, isUnsubscriptionMessage, isErrorMessage } from 'core/transport/utils';\nimport { ReceiveMessage } from 'core/transport/actions';\nimport { Order } from './types/Order';\n\ntype SymbolState = Order[];\n\nexport interface BookState {\n    [currencyPair: string]: SymbolState;\n}\n\nconst initialState: BookState = {\n}\n\nfunction snapshotReducer(state: SymbolState, action: ReceiveMessage) {\n    const [, orders] = action.payload;\n    return orders.map(([id, price, amount]: any[]) => ({\n        id,\n        price,\n        amount\n    }));\n}\n\nfunction updateReducer(state: SymbolState = [], action: ReceiveMessage) {\n    const [, order] = action.payload;\n    const [id, price, amount] = order;\n    const existingOrderIndex = state.findIndex(x => x.id === id);\n    const newOrUpdatedOrder = {\n        id,\n        price,\n        amount\n    };\n\n    if (price === 0 && existingOrderIndex >= 0) {\n        // remove\n        const updatedState = state.slice();\n        updatedState.splice(existingOrderIndex, 1);\n        return updatedState;\n    } else if (existingOrderIndex >= 0) {\n        // update\n        const updatedState = state.slice();\n        updatedState.splice(existingOrderIndex, 1, newOrUpdatedOrder);\n        return updatedState;\n    } else {\n        // add\n        return [\n            ...state,\n            newOrUpdatedOrder\n        ];\n    }\n}\n\nconst receiveMessageReducer = (state: BookState, action: ReceiveMessage) => {\n    if (isHeartbeat(action) || isSubscriptionMessage(action) || isErrorMessage(action)) {\n        return state;\n    }\n\n    const { channel, request } = action.meta || {};\n\n    if (channel === 'book') {\n        const { symbol } = request;    \n        const currencyPair = symbol.slice(1);  \n\n        if (isUnsubscriptionMessage(action)) {\n            const updatedState = {\n                ...state\n            };\n            delete updatedState[currencyPair];\n            return updatedState;\n        }\n\n        const symbolReducer = Array.isArray(action.payload[1][0]) ? snapshotReducer : updateReducer;\n        const result = symbolReducer(state[currencyPair], action);\n        return {\n            ...state,\n            [currencyPair]: result\n        };\n    }\n\n    return state;\n}\n\nexport const bookReducer = createReducer<BookState, Actions>({\n    [TRANSPORT_ACTION_TYPES.RECEIVE_MESSAGE]: receiveMessageReducer\n}, initialState);\n\nexport default bookReducer;","import { combineEpics } from 'redux-observable';\nimport { combineReducers } from 'redux';\nimport { BookActions } from './book/actions';\nimport { SelectionActions } from './selection/actions';\nimport { CandlesActions } from './candles/actions';\nimport { TickerActions } from './ticker/actions';\nimport { RefDataActions } from './reference-data/actions';\nimport appEpics from './app/epics';\nimport transportEpics from '../core/transport/epics';\nimport tradeEpics from './trades/epics';\nimport refDataEpics from './reference-data/epics';\nimport tickerEpics from './ticker/epics';\nimport candlesEpics from './candles/epics';\nimport selectionEpics from './selection/epics';\nimport bookEpics from './book/epics';\nimport { AppActions } from './app/actions';\nimport { TradesActions } from './trades/actions';\nimport { TransportActions } from 'core/transport/actions';\nimport { tradesReducer } from './trades/reducer';\nimport { subscriptionsReducer } from 'core/transport/reducer';\nimport { refDataReducer } from './reference-data/reducer';\nimport { tickerReducer } from './ticker/reducer';\nimport { candlesReducer } from './candles/reducer';\nimport { selectionReducer } from './selection/reducer';\nimport { bookReducer } from './book/reducer';\n\nexport const rootEpic = combineEpics(\n  appEpics,\n  refDataEpics,\n  transportEpics,\n  tradeEpics,\n  tickerEpics,\n  candlesEpics,\n  selectionEpics,\n  bookEpics\n);\n\nexport const rootReducer = combineReducers({\n  refData: refDataReducer,\n  subscriptions: subscriptionsReducer,\n  trades: tradesReducer,\n  ticker: tickerReducer,\n  candles: candlesReducer,\n  selection: selectionReducer,\n  book: bookReducer\n});\n\nexport type Actions = \n    AppActions\n  | RefDataActions\n  | TransportActions\n  | TradesActions\n  | TickerActions\n  | CandlesActions\n  | SelectionActions\n  | BookActions;\n\nexport type RootState = ReturnType<typeof rootReducer>;","import { createStore, applyMiddleware, compose } from 'redux';\nimport { createEpicMiddleware } from 'redux-observable';\nimport { ConnectionStatus } from 'core/transport/types/ConnectionStatus';\nimport createWsMiddleware from 'core/transport/middleware';\nimport { WsConnectionProxy } from 'core/transport/WsConnectionProxy';\nimport { Connection } from 'core/transport/Connection';\nimport { TransportActions } from 'core/transport/actions';\nimport { Actions, RootState } from './../root';\nimport { rootEpic, rootReducer } from '../root';\n\nconst connectionProxy = new WsConnectionProxy('wss://api-pub.bitfinex.com/ws/2');\n\nconst connection = new Connection(connectionProxy);\n\nconst dependencies = {\n  connection\n};\n\nexport type Dependencies = typeof dependencies;\n\nconst epicMiddleware = createEpicMiddleware<\n  Actions,\n  Actions,\n  RootState,\n  Dependencies\n>({\n  dependencies\n});\n\nconst wsMiddleware = createWsMiddleware({connection});\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default function configureStore() {\n  const store = createStore(\n    rootReducer,\n    composeEnhancers(\n      applyMiddleware(wsMiddleware, epicMiddleware)\n    )\n  );\n\n  connection.onConnect(() => {\n    store.dispatch(TransportActions.changeConnectionStatus(ConnectionStatus.Connected));\n    console.log('Connected');\n  });\n\n  epicMiddleware.run(rootEpic);\n\n  return store;\n}","import { useMemo, useEffect, useState } from 'react';\nimport { throttle } from 'lodash';\n\nexport const useThrottleFn = <T extends (...args: any) => any>(\n  fn: T,\n  ms = 1000,\n) => {\n  const throttledFn = useMemo(() => {\n    return throttle(fn, ms);\n  }, [fn, ms]);\n\n  // fn may call setState.\n  useEffect(() => {\n    return () => {\n      throttledFn.cancel();\n    };\n  }, [throttledFn]);\n  return throttledFn;\n};\n\nexport const useThrottle = <T>(value: T, ms = 1000) => {\n    const [throttledValue, setThrottledValue] = useState(value);\n    const setThrottledValueThrottled = useThrottleFn(setThrottledValue, ms);\n    setThrottledValueThrottled(value);\n    return throttledValue;\n  };","import { formatPrice } from 'modules/reference-data/utils';\n\nexport const priceFormatter = (params: {value: string}) => formatPrice(params.value);\n\n\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    width: 100%;\n    height: 100%;\n    font-family: FiraSans-Light;\n`;\n","const Palette = {\n    Bid: '#00AD08',\n    Ask: '#FF264D',\n    Positive: '#00AD08',\n    Negative: '#FF264D',\n    Orange: '#ffa41b',\n    White: '#fff',\n    BackgroundColor: '#222',\n    Label: 'rgba(245, 245, 245, 0.64)',\n    Border: '#424242',\n    LightGray: 'rgba(245, 245, 245, 0.64)'\n};\n\nexport default Palette;","import React, { FC } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport { ColDef } from 'ag-grid-community';\nimport { DateTime } from 'luxon';\nimport { useThrottle } from 'core/hooks/useThrottle';\nimport { priceFormatter } from 'modules/ag-grid/agGridFormatter';\nimport { Trade } from '../../types/Trade';\nimport { Container } from './Trades.styled';\nimport Palette from 'theme/style';\n\nexport interface Props {\n    trades: Trade[];\n}\n\nconst Trades: FC<Props> = props => {\n    const { trades } = props;\n    const throttledTrades = useThrottle<Trade[]>(trades, 500);\n\n    const columnDefs: ColDef[] = [{\n        headerName: 'Id',\n        field: 'id',\n        hide: true\n    }, {\n        headerName: 'Amount',\n        field: 'amount',\n        valueFormatter: params => Math.abs(params.value).toString(),\n        \n    }, {\n        headerName: 'Price',\n        field: 'price',\n        cellStyle: params => {\n            return {\n                color: params.value < 0 ? Palette.Ask : Palette.Bid\n            }\n        },\n        valueFormatter: priceFormatter\n    }, {\n        headerName: 'Time',\n        field: 'timestamp',\n        valueFormatter: params => DateTime.fromMillis(params.value).toLocaleString(DateTime.TIME_24_WITH_SECONDS),\n        cellStyle: () => ({\n            color: Palette.LightGray\n        })\n    }];\n\n    return (\n        <Container className='ag-theme-balham-dark'>\n            <AgGridReact\n                columnDefs={columnDefs}\n                rowData={throttledTrades}\n                deltaRowDataMode={true}\n                getRowNodeId={data => data.id}\n                onGridReady={event => event.api.sizeColumnsToFit()}\n            >\n            </AgGridReact>\n        </Container>\n    );\n}\n\nexport default Trades;","import { createSelector } from 'reselect';\nimport { memoize } from 'lodash';\nimport { RootState } from 'modules/root';\n\nconst tradesSelector = (state: RootState) => state.trades;\n\nexport const getTrades = createSelector(\n    tradesSelector,\n    trades => memoize(\n        (symbol: string) => trades[symbol]\n    )\n)\n","import Trades from './Trades.container';\n\nexport default Trades;","import { connect } from 'react-redux';\nimport { RootState } from 'modules/root';\nimport Trades, { Props } from './Trades'\nimport { getTrades } from '../../selectors';\nimport { getCurrencyPair } from 'modules/selection/selectors';\n\nconst mapStateToProps = (state: RootState): Props => {\n    const currencyPair = getCurrencyPair(state);\n    const trades = currencyPair ? getTrades(state)(currencyPair) : [];\n\n    return {\n        trades\n    };\n}\n\nexport default connect(mapStateToProps)(Trades);","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(270px, 1fr));\n    gap: 10px;\n`;","import { createSelector } from 'reselect';\nimport { memoize } from 'lodash';\nimport { RootState } from 'modules/root';\n\nconst tickerSelector = (state: RootState) => state.ticker;\n\nexport const getTicker = createSelector(\n    tickerSelector,\n    ticker => memoize(\n        (symbol: string) => ticker[symbol]\n    )\n)\n","import styled from 'styled-components';\nimport Palette from 'theme/style';\n\nexport const Container = styled.div<{\n    isActive: boolean;\n}>`\n    cursor: pointer;\n    display: grid;\n    grid-template-rows: 25px 1fr;\n    height: 50px;\n    grid-template-columns: repeat(2, 1fr);\n    grid-template-areas: \n        \"currencyPair price\"\n        \"relativeChange change\";\n    font-size: 12px;\n    padding: 5px 10px;\n    border: 1px solid ${({isActive}) => isActive ? Palette.Orange : Palette.Border};\n\n    &:hover {\n        background-color: #2d3436;\n    }\n`;\n\nexport const CurrencyPair = styled.div`\n    color: ${Palette.White};\n    grid-area: currencyPair;\n`;\n\nexport const Price = styled.div`\n    color: ${Palette.White};\n    grid-area: price;\n    margin-right: 0;\n    margin-left: auto;\n`;\n\nexport const RelativeChange = styled.div<{\n    isPositive: boolean;\n}>`\n    grid-area: relativeChange;\n    font-size: 18px;\n    color: ${({isPositive}) => isPositive ? Palette.Positive : Palette.Negative};\n    display: flex;\n    font-family: FiraSans-Medium;\n`;\n\nexport const Change = styled.div<{\n    isPositive: boolean;\n}>`\n    grid-area: change;\n    margin-right: 0;\n    margin-left: auto;\n    color: ${({isPositive}) => isPositive ? Palette.Positive : Palette.Negative};\n`;","import styled from 'styled-components';\nimport Palette from '../../../theme/style';\n\nexport const Content = styled.div`\n    display: flex;\n`;\n\nexport const IdenticalPart = styled.div`\n\n`;\n\nexport const ChangedPart = styled.div`\n    color: ${Palette.Orange};\n`;","import React, { FC, useEffect, useState, createRef } from 'react';\nimport { usePrevious } from 'core/hooks/usePrevious';\nimport { Content, IdenticalPart } from './UpdateHightlight.styled';\nimport Palette from 'theme/style';\n\nexport const RESET_HIGHLIGHT_AFTER_MS = 1500;\n\nexport interface IProps {\n    value?: string | null;\n}\n\nexport const calculateParts = (value: string, prevValue: string) => {\n    if (!value || !prevValue) {\n        return [value, ''];\n    }\n    const length = Math.min(value.length, prevValue.length);\n    let index = 0;\n    for (let i = 0; i < length; i++) {\n        if (value[i] === prevValue[i]) {\n            index++;\n        } else {\n            break;\n        }\n    }\n    return [value.slice(0, index), value.slice(index, value.length)];\n};\n\nconst UpdateHighlight: FC<IProps> = props => {\n    const changedPartRef = createRef<HTMLDivElement>();\n    const { value } = props;\n    const prev = usePrevious(value);\n    const [[identicalPart, changedPart], setParts] = useState<string[]>([]);\n\n    useEffect(() => {\n        setParts(calculateParts(value || '', prev || ''));\n        let animation: Animation | undefined = undefined;\n        if (typeof changedPartRef.current?.animate === 'function') {\n            animation = changedPartRef.current.animate([\n                // keyframes\n                { color: Palette.White },\n                { color: Palette.Orange },\n                { color: Palette.White }\n            ], {\n                duration: 500,\n                iterations: 2\n            });\n        }\n\n        const timeoutId = setTimeout(() => {\n            setParts([value || '', '']);\n            if (animation) {\n                animation.cancel();\n            }\n        }, RESET_HIGHLIGHT_AFTER_MS);\n\n        return () => clearTimeout(timeoutId);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [value]);\n\n    return (\n        <Content>\n            <IdenticalPart>{identicalPart}</IdenticalPart>\n            <div ref={changedPartRef}>{changedPart}</div>\n        </Content>\n    );\n}\n\nexport default UpdateHighlight;","import { useEffect, useRef } from 'react';\n\nexport const usePrevious = (val: any) => {\n    const ref = useRef();\n\n    useEffect(() => {\n        ref.current = val;\n    }, [val]);\n\n    return ref.current;\n}","import styled from 'styled-components';\n\nexport const Icon = styled.i`\n    font-size: 16px;\n    line-height: 20px;\n    width: 20px;\n`","import TrendIndicator from './TrendIndicator';\n\nexport default TrendIndicator;","import React, { FC, useEffect, useState } from 'react';\nimport { Icon } from './TrendIndicator.styled';\n\nconst SHOW_ICON_FOR_X_MS = 5000;\n\nexport interface Props {\n    value: number;\n}\n\nconst TrendIndicator: FC<Props> = props => {\n    const { value } = props;\n    const [isHidden, setIsHidden] = useState(true);\n\n    useEffect(() => {\n        setIsHidden(false);\n\n        const timeoutId = setTimeout(() => setIsHidden(true), SHOW_ICON_FOR_X_MS);\n\n        return () => {\n            clearTimeout(timeoutId);\n        }\n    }, [value]);\n\n    const icon = isHidden\n        ? ''\n        : value > 0 \n            ? 'arrow_upward' \n            : value < 0 ? 'arrow_downward' : '';\n\n    return <Icon className=\"material-icons\">{icon}</Icon>;\n};\n\nexport default TrendIndicator;","import React, { FC } from 'react';\nimport { Container, CurrencyPair, Price, RelativeChange, Change } from './Ticker.styled';\nimport UpdateHighlight from 'core/components/update-highlight/UpdateHighlight';\nimport { formatCurrencyPair, formatPrice } from 'modules/reference-data/utils';\nimport TrendIndicator from 'core/components/trend-indicator';\n\nexport interface StateProps {\n    currencyPair: string;\n    lastPrice: number;\n    dailyChange: number;\n    dailyChangeRelative: number;\n    isActive?: boolean;\n}\n\nexport interface DispatchProps {\n    onClick?: () => void;\n}\n\nexport type Props = StateProps & DispatchProps;\n\nconst Ticker: FC<Props> = props => {\n    const { currencyPair, lastPrice, dailyChange, dailyChangeRelative, onClick, isActive } = props;\n    const isPositiveChange = dailyChange > 0;\n    const percentChange = dailyChangeRelative ? dailyChangeRelative * 100 : undefined;\n    return (\n        <Container onClick={onClick} isActive={!!isActive}>\n            <CurrencyPair>{formatCurrencyPair(currencyPair)}</CurrencyPair>\n            <Price><UpdateHighlight value={formatPrice(lastPrice)} /></Price>\n            <RelativeChange isPositive={isPositiveChange}>\n                <TrendIndicator value={dailyChangeRelative} />\n                <UpdateHighlight value={percentChange?.toFixed(2)} />\n                {percentChange && '%'}\n            </RelativeChange>\n            <Change isPositive={isPositiveChange}><UpdateHighlight value={dailyChange?.toFixed(2)} /></Change>\n        </Container>\n    );\n}\n\nexport default Ticker;","import Ticker from './Ticker.container';\n\nexport default Ticker;","import { connect } from 'react-redux';\nimport { RootState } from 'modules/root';\nimport { Dispatch } from 'redux';\nimport { SelectionActions } from 'modules/selection/actions';\nimport { getCurrencyPair } from 'modules/selection/selectors';\nimport { getTicker } from './../../selectors';\nimport Ticker, { StateProps, DispatchProps } from './Ticker';\n\nexport interface ContainerProps {\n    currencyPair: string;\n}\n\nconst mapStateToProps = (state: RootState, props: ContainerProps): StateProps => {\n    const { currencyPair } = props;\n    const selectedCurrencyPair = getCurrencyPair(state);\n    const ticker = getTicker(state)(currencyPair);\n    \n    return {\n        lastPrice: ticker?.lastPrice,\n        currencyPair,\n        dailyChangeRelative: ticker?.dailyChangeRelative,\n        dailyChange: ticker?.dailyChange,\n        isActive: selectedCurrencyPair === currencyPair\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: ContainerProps): DispatchProps => {\n    const { currencyPair } = ownProps;\n\n    return {\n        onClick: () => dispatch(SelectionActions.selectCurrencyPair({currencyPair}))\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Ticker);","import React, { FC } from 'react';\nimport { Container } from './Tickers.styled';\nimport Ticker from '../Ticker';\n\nexport interface Props {\n    currencyPairs: string[];\n}\n\nconst Tickers: FC<Props> = props => {\n    const { currencyPairs } = props;\n\n    return (\n        <Container>            \n            {currencyPairs.map(currencyPair => <Ticker key={currencyPair} currencyPair={currencyPair} />)}\n        </Container>\n    )\n}\n\nexport default Tickers;","import Tickers from './Tickers.container';\n\nexport default Tickers;","import { connect } from 'react-redux';\nimport { getCurrencyPairs } from 'modules/reference-data/selectors';\nimport { RootState } from 'modules/root';\nimport Tickers, { Props } from './Tickers';\n\nconst mapStateToProps = (state: RootState): Props => {\n    const currencyPairs = getCurrencyPairs(state);\n    \n    return {\n        currencyPairs\n    };\n}\n\nexport default connect(mapStateToProps)(Tickers);","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    width: 100%;\n    height: 100%;\n`;","import * as Highcharts from 'highcharts/highstock';\nimport Palette from './style';\n\n(Highcharts as any).theme = {\n    colors: ['#2b908f', '#90ee7e', '#f45b5b', '#7798BF', '#aaeeee', '#ff0066',\n        '#eeaaee', '#55BF3B', '#DF5353', '#7798BF', '#aaeeee'],\n    chart: {\n        backgroundColor: {\n            stops: [\n                [0, '#2a2a2b'],\n                [1, '#3e3e40']\n            ]\n        },\n    },\n    xAxis: {\n        labels: {\n            style: {\n                color: '#E0E0E3'\n            }\n        },\n        lineColor: '#707073',\n        minorGridLineColor: '#505053',\n        tickColor: '#707073',\n        title: {\n            style: {\n                color: '#A0A0A3'\n            }\n        }\n    },\n    yAxis: {\n        gridLineColor: Palette.Border,\n        labels: {\n            style: {\n                color: '#E0E0E3'\n            }\n        },\n        lineColor: '#707073',\n        minorGridLineColor: '#505053',\n        tickColor: '#707073',\n        tickWidth: 1,\n        title: {\n            style: {\n                color: '#A0A0A3'\n            }\n        }\n    },\n    tooltip: {\n        borderColor: Palette.Border,\n        backgroundColor: 'rgba(0, 0, 0, 0.85)',\n        style: {\n            color: Palette.White\n        }\n    },\n    plotOptions: {\n        series: {\n            dataLabels: {\n                color: '#F0F0F3',\n                style: {\n                    fontSize: '13px'\n                }\n            },\n            marker: {\n                lineColor: '#333'\n            }\n        },\n        boxplot: {\n            fillColor: '#505053'\n        },\n        candlestick: {\n            lineColor: 'white'\n        },\n        errorbar: {\n            color: 'white'\n        }\n    },\n    legend: {\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n        itemStyle: {\n            color: '#E0E0E3'\n        },\n        itemHoverStyle: {\n            color: '#FFF'\n        },\n        itemHiddenStyle: {\n            color: '#606063'\n        },\n        title: {\n            style: {\n                color: '#C0C0C0'\n            }\n        }\n    },\n    credits: {\n        style: {\n            color: '#666'\n        }\n    },\n    labels: {\n        style: {\n            color: '#707073'\n        }\n    },\n    drilldown: {\n        activeAxisLabelStyle: {\n            color: '#F0F0F3'\n        },\n        activeDataLabelStyle: {\n            color: '#F0F0F3'\n        }\n    },\n    navigation: {\n        buttonOptions: {\n            symbolStroke: '#DDDDDD',\n            theme: {\n                fill: '#505053'\n            }\n        }\n    },\n    // scroll charts\n    rangeSelector: {\n        buttonTheme: {\n            fill: '#505053',\n            stroke: '#000000',\n            style: {\n                color: '#CCC'\n            },\n            states: {\n                hover: {\n                    fill: '#707073',\n                    stroke: '#000000',\n                    style: {\n                        color: 'white'\n                    }\n                },\n                select: {\n                    fill: '#000003',\n                    stroke: '#000000',\n                    style: {\n                        color: 'white'\n                    }\n                }\n            }\n        },\n        inputBoxBorderColor: '#505053',\n        inputStyle: {\n            backgroundColor: '#333',\n            color: 'silver'\n        },\n        labelStyle: {\n            color: 'silver'\n        }\n    },\n    navigator: {\n        handles: {\n            backgroundColor: '#666',\n            borderColor: '#AAA'\n        },\n        outlineColor: '#CCC',\n        maskFill: 'rgba(255,255,255,0.1)',\n        series: {\n            color: '#7798BF',\n            lineColor: '#A6C7ED'\n        },\n        xAxis: {\n            gridLineColor: '#505053'\n        }\n    },\n    scrollbar: {\n        barBackgroundColor: '#808083',\n        barBorderColor: '#808083',\n        buttonArrowColor: '#CCC',\n        buttonBackgroundColor: '#606063',\n        buttonBorderColor: '#606063',\n        rifleColor: '#FFF',\n        trackBackgroundColor: '#404043',\n        trackBorderColor: '#404043'\n    }\n};\n\nHighcharts.setOptions((Highcharts as any).theme);","import React, { FC, useEffect, useState } from 'react';\nimport * as Highcharts from 'highcharts/highstock';\nimport HighchartsReact from 'highcharts-react-official';\nimport { Container } from './CandlesChart.styled';\nimport { Candle } from '../../types/Candle';\nimport { formatCurrencyPair } from 'modules/reference-data/utils';\nimport 'theme/Highstock';\nimport Palette from 'theme/style';\n\nexport interface Props {\n    candles: Candle[];\n    currencyPair?: string;\n}\n\nconst CandlesChart: FC<Props> = props => {\n    const { candles, currencyPair } = props;\n    const [chartOptions, setChartOptions] = useState<Highcharts.Options>({\n        time: {\n            useUTC: false\n        },\n        yAxis: [{\n            labels: {\n                align: 'right',\n                x: -3\n            },\n            title: {\n                text: 'OHLC'\n            },\n            height: '70%',\n            lineWidth: 2,\n            resize: {\n                enabled: true\n            }\n        }, {\n            labels: {\n                align: 'right',\n                x: -3\n            },\n            title: {\n                text: 'Volume'\n            },\n            top: '75%',\n            height: '25%',\n            offset: 0,\n            lineWidth: 2\n        }],\n        series: [{\n            type: 'candlestick',\n            data: []\n        }, {\n            type: 'column',\n            name: 'Volume',\n            data: [],\n            yAxis: 1\n        }],\n        rangeSelector: {\n            selected: 1,\n            buttons: [{\n                type: 'minute',\n                count: 5,\n                text: '5m'\n            }, {\n                type: 'minute',\n                count: 30,\n                text: '30m'\n            }, {\n                type: 'hour',\n                count: 1,\n                text: '1h'\n            }, {\n                type: 'hour',\n                count: 12,\n                text: '12h'\n            }, {\n                type: 'all',\n                text: 'All'\n            }]\n        },\n    })\n\n    useEffect(() => {\n        if (candles && candles.length > 0) {\n            const ohlc = candles.map(({ timestamp, ...rest }) => ({\n                x: timestamp,\n                ...rest\n            }))\n                .sort((a, b) => a.x - b.x);\n            const volumes = candles.map(({timestamp, volume}) => [timestamp, volume]).sort((a, b) => a[0] - b[0]);\n\n            setChartOptions({\n                series: [{\n                    type: 'candlestick',\n                    name: currencyPair && formatCurrencyPair(currencyPair),\n                    data: ohlc\n                }, {\n                    type: 'column',\n                    data: volumes,\n                }],\n                plotOptions: {\n                    candlestick: {\n                        color: Palette.Negative,\n                        upColor: Palette.Positive\n                    },\n                    column: {\n                        color: Palette.LightGray\n                    }\n                }\n            });\n        }\n\n    }, [candles, currencyPair]);\n\n    return (\n        <Container className=\"candles-chart\">\n            <HighchartsReact\n                highcharts={Highcharts}\n                options={chartOptions}\n                constructorType={'stockChart'}\n            />\n        </Container>\n    )\n}\n\nexport default CandlesChart;","import { createSelector } from 'reselect';\nimport { memoize } from 'lodash';\nimport { RootState } from 'modules/root';\n\nconst candlesSelector = (state: RootState) => state.candles;\n\nexport const getCandles = createSelector(\n    candlesSelector,\n    candles => memoize(\n        (symbol: string) => candles[symbol]\n    )\n)\n","import CandlesChart from './CandlesChart.container';\n\nexport default CandlesChart;","import { connect } from 'react-redux';\nimport CandlesChart, { Props } from './CandlesChart';\nimport { RootState } from 'modules/root';\nimport { getCandles } from '../../selectors';\nimport { getCurrencyPair } from 'modules/selection/selectors';\n\nconst mapStateToProps = (state: RootState): Props => {\n    const currencyPair = getCurrencyPair(state);\n    const candles = currencyPair ? getCandles(state)(currencyPair) : [];\n    \n    return {\n        candles,\n        currencyPair\n    };\n}\n\n\nexport default connect(mapStateToProps)(CandlesChart);","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    width: 100%;\n    height: 100%;\n    font-family: FiraSans-Light;\n`;\n","import React, { FC } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport { ColDef } from 'ag-grid-community';\nimport { priceFormatter } from 'modules/ag-grid/agGridFormatter';\nimport { useThrottle } from 'core/hooks/useThrottle';\nimport { Container } from './Book.styled';\nimport { Order } from '../../types/Order';\nimport Palette from 'theme/style';\n\nexport interface Props {\n    orders: {bid: Order, ask: Order}[];\n}\n\nconst Book: FC<Props> = props => {\n    const { orders } = props;\n    const throttledOrders = useThrottle<{bid: Order, ask: Order}[]>(orders, 500);\n\n    const columnDefs: ColDef[] = [{\n        headerName: 'Bid Amount',\n        field: 'bid.amount'\n    }, {\n        headerName: 'Bid Price',\n        field: 'bid.price',\n        cellStyle: () => ({\n            color: Palette.Bid\n        }),\n        type: 'numericColumn',\n        valueFormatter: priceFormatter\n    }, {\n        headerName: 'Ask Price',\n        field: 'ask.price',\n        cellStyle: () => ({\n            color: Palette.Ask\n        }),\n        valueFormatter: priceFormatter\n    }, {\n        headerName: 'Ask Amount',\n        field: 'ask.amount',\n        valueFormatter: params => params.value ? Math.abs(params.value).toString() : ''\n    }];\n\n    return (\n        <Container className='ag-theme-balham-dark'>\n            <AgGridReact\n                columnDefs={columnDefs}\n                rowData={throttledOrders}\n                deltaRowDataMode={true}\n                getRowNodeId={data => [data.bid?.id, data.ask?.id].join('#')}\n                onGridReady={event => event.api.sizeColumnsToFit()}\n            >\n            </AgGridReact>\n        </Container>\n    );\n}\n\nexport default Book;","import { createSelector } from 'reselect';\nimport { memoize, range, uniq } from 'lodash';\nimport { RootState } from 'modules/root';\nimport { Order } from './types/Order';\n\nconst bookSelector = (state: RootState) => state.book;\n\nexport const getRawBook = createSelector(\n    bookSelector,\n    book => memoize(\n        (symbol: string) => book[symbol]\n    )\n)\n\nexport const getBook = createSelector(\n    bookSelector,\n    book => memoize((symbol: string) => {\n        const rawBook = book[symbol] || [];\n\n        const bids = rawBook\n            .filter(order => order.amount > 0)\n            .sort((a, b) => b.price - a.price);\n        const asks = rawBook\n            .filter(order => order.amount < 0)\n            .sort((a, b) => a.price - b.price);\n\n        const maxDepth = Math.max(bids.length, asks.length);\n\n        return range(maxDepth)\n            .map(depth => {\n                const bid = bids[depth];\n                const ask = asks[depth];\n\n                return {\n                    bid,\n                    ask,\n                    depth\n                };\n            });\n    })\n)\n\nconst getPricePoints = (orders: Order[]) => uniq(orders.map(order => order.price)).sort((a, b) => a - b);\n\nconst computeDepth = (orders: Order[]) => {\n    return (pricePoints: number[], orderFilter: (order: Order, pricePoint: number) => boolean) => {\n        return pricePoints.map(price => {\n            const depth = orders.filter(order => orderFilter(order, price)).reduce((acc, order) => {\n                return acc += Math.abs(order.amount);\n            }, 0);\n            return {\n                price,\n                depth\n            };\n        });\n    }\n}\n\nexport const getDepth = createSelector(\n    bookSelector,\n    book => memoize((symbol: string) => {\n        const rawBook = book[symbol] || [];\n\n        const bids = rawBook\n            .filter(order => order.amount > 0);\n\n        const asks = rawBook\n            .filter(order => order.amount < 0);\n\n        const bidPrices = getPricePoints(bids);\n        const askPrices = getPricePoints(asks);\n\n        const bidDepth = computeDepth(bids)(bidPrices, (order, pricePoint) => order.price >= pricePoint);\n        const askDepth = computeDepth(asks)(askPrices, (order, pricePoint) => order.price <= pricePoint);\n\n        return {\n            bids: bidDepth,\n            asks: askDepth\n        };\n    })\n)","import Book from './Book.container';\n\nexport default Book;","import { connect } from 'react-redux';\nimport { RootState } from 'modules/root';\nimport { getCurrencyPair } from 'modules/selection/selectors';\nimport Book, { Props } from './Book'\nimport { getBook } from '../../selectors';\n\nconst mapStateToProps = (state: RootState): Props => {\n    const currencyPair = getCurrencyPair(state);\n    const orders = currencyPair ? getBook(state)(currencyPair) : [];\n\n    return {\n        orders\n    };\n}\n\nexport default connect(mapStateToProps)(Book);","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    width: 100%;\n    height: 100%;\n`;\n","import * as Highcharts from 'highcharts';\nimport Palette from './style';\n\n(Highcharts as any).theme = {\n    colors: ['#2b908f', '#90ee7e', '#f45b5b', '#7798BF', '#aaeeee', '#ff0066',\n        '#eeaaee', '#55BF3B', '#DF5353', '#7798BF', '#aaeeee'],\n    chart: {\n        backgroundColor: {\n            stops: [\n                [0, '#2a2a2b'],\n                [1, '#3e3e40']\n            ]\n        },\n    },\n    xAxis: {\n        labels: {\n            style: {\n                color: '#E0E0E3'\n            }\n        },\n        lineColor: '#707073',\n        minorGridLineColor: '#505053',\n        tickColor: '#707073',\n        title: {\n            style: {\n                color: '#A0A0A3'\n            }\n        }\n    },\n    yAxis: {\n        gridLineColor: Palette.Border,\n        labels: {\n            style: {\n                color: '#E0E0E3'\n            }\n        },\n        lineColor: '#707073',\n        minorGridLineColor: '#505053',\n        tickColor: '#707073',\n        tickWidth: 1,\n        title: {\n            style: {\n                color: '#A0A0A3'\n            }\n        }\n    },\n    tooltip: {\n        borderColor: Palette.Border,\n        backgroundColor: 'rgba(0, 0, 0, 0.85)',\n        style: {\n            color: Palette.White\n        }\n    },\n    plotOptions: {\n        series: {\n            dataLabels: {\n                color: '#F0F0F3',\n                style: {\n                    fontSize: '13px'\n                }\n            },\n            marker: {\n                lineColor: '#333'\n            }\n        },\n        boxplot: {\n            fillColor: '#505053'\n        },\n        candlestick: {\n            lineColor: 'white'\n        },\n        errorbar: {\n            color: 'white'\n        }\n    },\n    legend: {\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n        itemStyle: {\n            color: '#E0E0E3'\n        },\n        itemHoverStyle: {\n            color: '#FFF'\n        },\n        itemHiddenStyle: {\n            color: '#606063'\n        },\n        title: {\n            style: {\n                color: '#C0C0C0'\n            }\n        }\n    },\n    credits: {\n        style: {\n            color: '#666'\n        }\n    },\n    labels: {\n        style: {\n            color: '#707073'\n        }\n    },\n    drilldown: {\n        activeAxisLabelStyle: {\n            color: '#F0F0F3'\n        },\n        activeDataLabelStyle: {\n            color: '#F0F0F3'\n        }\n    },\n    navigation: {\n        buttonOptions: {\n            symbolStroke: '#DDDDDD',\n            theme: {\n                fill: '#505053'\n            }\n        }\n    },\n    // scroll charts\n    rangeSelector: {\n        buttonTheme: {\n            fill: '#505053',\n            stroke: '#000000',\n            style: {\n                color: '#CCC'\n            },\n            states: {\n                hover: {\n                    fill: '#707073',\n                    stroke: '#000000',\n                    style: {\n                        color: 'white'\n                    }\n                },\n                select: {\n                    fill: '#000003',\n                    stroke: '#000000',\n                    style: {\n                        color: 'white'\n                    }\n                }\n            }\n        },\n        inputBoxBorderColor: '#505053',\n        inputStyle: {\n            backgroundColor: '#333',\n            color: 'silver'\n        },\n        labelStyle: {\n            color: 'silver'\n        }\n    },\n    navigator: {\n        handles: {\n            backgroundColor: '#666',\n            borderColor: '#AAA'\n        },\n        outlineColor: '#CCC',\n        maskFill: 'rgba(255,255,255,0.1)',\n        series: {\n            color: '#7798BF',\n            lineColor: '#A6C7ED'\n        },\n        xAxis: {\n            gridLineColor: '#505053'\n        }\n    },\n    scrollbar: {\n        barBackgroundColor: '#808083',\n        barBorderColor: '#808083',\n        buttonArrowColor: '#CCC',\n        buttonBackgroundColor: '#606063',\n        buttonBorderColor: '#606063',\n        rifleColor: '#FFF',\n        trackBackgroundColor: '#404043',\n        trackBorderColor: '#404043'\n    }\n};\n\nHighcharts.setOptions((Highcharts as any).theme);","import React, { FC, useState, useEffect } from 'react';\nimport * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { useThrottle } from 'core/hooks/useThrottle';\nimport { Container } from './DepthChart.styled';\nimport Palette from 'theme/style';\nimport 'theme/Highchart';\n\ninterface Depth {\n    bids: {price: number, depth: number}[];\n    asks: {price: number, depth: number}[];\n};\n\nexport interface Props {\n    depth: Depth;\n}\n\nconst DepthChart: FC<Props> = props => {\n    const { depth } = props;\n    const throttledDepth = useThrottle<Depth>(depth, 500);\n    const [chartOptions, setChartOptions] = useState<Highcharts.Options>({\n        chart: {\n            type: 'area',\n            animation: false,\n            height: '250px'\n        },\n        title: {\n            text: ''\n        },\n        legend: {\n            enabled: false\n        },\n        series: [{\n            name: 'bids',\n            type: 'area',\n            data: []\n        }, {\n            name: 'asks',\n            type: 'area',\n            data: []\n        }],\n        xAxis: {\n            labels: {\n                autoRotation: false\n            }\n        },\n        yAxis: {\n            title: {\n                text: ''\n            },\n            labels: {\n                enabled: false\n            }\n        },\n        plotOptions: {\n            area: {\n                marker: {\n                    enabled: false,\n                    states: {\n                        hover: {\n                            enabled: false\n                        }\n                    }\n                }\n            }\n        },\n    })\n\n    useEffect(() => {\n        const { bids, asks } = throttledDepth;\n\n        setChartOptions({\n            xAxis: {\n                categories: [...bids, ...asks].map(order => order.price.toString()),\n                labels: {\n                    step: 5,\n                    formatter: function() {\n                        return Number.parseFloat(this.value.toString()).toFixed(0);\n                    }\n                }\n            },\n            series: [{\n                name: 'bids',\n                type: 'area',\n                data: [\n                    ...bids.map(bid => bid.depth),\n                    ...asks.map(() => null)\n                ],\n                color: Palette.Bid\n            }, {\n                name: 'asks',\n                type: 'area',\n                data: [\n                    ...bids.map(() => null),\n                    ...asks.map(ask => ask.depth)\n                ],\n                color: Palette.Ask\n            }]\n        });\n\n    }, [throttledDepth]);\n\n    return (\n        <Container>\n            <HighchartsReact\n                highcharts={Highcharts}\n                options={chartOptions}\n                constructorType={'chart'}\n            />\n        </Container>\n    )\n}\n\nexport default DepthChart;","import DepthChart from './DepthChart.container';\n\nexport default DepthChart;","import { connect } from 'react-redux';\nimport { RootState } from 'modules/root';\nimport { getCurrencyPair } from 'modules/selection/selectors';\nimport DepthChart, { Props } from './DepthChart'\nimport { getDepth } from '../../selectors';\n\nconst mapStateToProps = (state: RootState): Props => {\n    const currencyPair = getCurrencyPair(state);\n    const depth = currencyPair ? getDepth(state)(currencyPair) : { bids: [], asks: [] };\n\n    return {\n        depth\n    };\n}\n\nexport default connect(mapStateToProps)(DepthChart);","import styled from 'styled-components';\nimport Palette from 'theme/style';\n\nexport const Container = styled.div`\n    height: 100%;\n    display: grid;\n    grid-template-rows: 20px 1fr;\n    grid-template-columns: 1fr;\n    grid-template-areas:\n        \"header\"\n        \"body\";\n`;\n\nexport const Header = styled.div`\n    grid-area: header;\n    color: ${Palette.Label};\n    font-size: 12px;\n`;\n\nexport const Body = styled.div`\n    grid-area: body;\n`;","import Widget from './Widget';\n\nexport default Widget;","import React, { FC } from 'react';\nimport { Container, Header, Body } from './Widget.styled';\n\nexport interface Props {\n    children: JSX.Element;\n    title: string;\n}\n\nconst Widget: FC<Props> = props => {\n    const { children, title } = props;\n\n    return (\n        <Container>\n            <Header>{title}</Header>\n            <Body>{children}</Body>\n        </Container>\n    )\n}\n\nexport default Widget;","import styled from 'styled-components';\nimport Palette from 'theme/style';\n\nexport const Container = styled.div`\n    font-size: 10px;\n    color: ${Palette.White};\n    padding: 0 10px;\n    display: flex;\n    justify-content: flex-end;\n`;","import Diagnostics from './Diagnostics';\n\nexport default Diagnostics;","import React, { FC, useState, useEffect } from 'react';\nimport { Container } from './Diagnostics.styled';\n\nconst DIAGNOSTICS_INTERVAL_MS = 2000;\n\nconst Diagnostics: FC<{}> = () => {\n    const [delay, setDelay] = useState<number | undefined>();\n    useEffect(() => {\n        let timeoutId: number | undefined = undefined;\n        const intervalId = setInterval(() => {\n            const time = Date.now();\n            if (timeoutId) {\n                clearTimeout(timeoutId);\n            }\n            timeoutId = setTimeout(() => {\n                setDelay(Date.now() - time);\n            });\n        }, DIAGNOSTICS_INTERVAL_MS);\n\n        return () => {\n            clearInterval(intervalId);\n            if (timeoutId) {\n                clearTimeout(timeoutId);\n            }\n        };\n    }, []);\n\n    return <Container>Latency: {delay}ms</Container>;\n};\n\nexport default Diagnostics;","import styled from 'styled-components';\nimport Palette from 'theme/style';\n\nexport const Container = styled.div`\n    background-color: ${Palette.BackgroundColor};\n    width: 100vw;\n    height: 100vh;\n    overflow: hidden;\n`;\n\nexport const Content = styled.div`\n    display: grid;\n    grid-gap: 5px;\n    padding: 5px 10px;\n    width: 100%;\n    height: 100%;\n    @media only screen and (min-width: 1200px) {\n        grid-template-rows: 40px 70px 1fr 250px 50px;\n        grid-template-columns: 400px 1fr 400px;\n        grid-template-areas: \n            \"header header header\"\n            \"tickers tickers tickers\"\n            \"trades candles candles\"\n            \"trades book depth\"\n            \"footer footer footer\";\n    }\n\n    @media only screen and (min-width: 600px) and (max-width: 1200px) {\n        grid-template-rows: 40px 70px 1fr 250px 50px;\n        grid-template-columns: 1fr 1fr;\n        grid-template-areas: \n            \"header header\"\n            \"tickers tickers\"\n            \"trades book\"\n            \"trades depth\"\n            \"footer footer\";\n\n        .candles-chart {\n            display: none;\n        }\n    }\n\n    @media only screen and (max-width: 600px) {\n        grid-template-rows: 40px calc(100% - 90px) 50px;\n        grid-template-columns: 1fr;\n        grid-template-areas: \n            \"header\"\n            \"tickers\"\n            \"footer\";\n\n        .candles-chart {\n            display: none;\n        }\n    }\n`;\n\nexport const Header = styled.div`\n    grid-area: header;\n    color: ${Palette.White};\n    font-family: FiraSans-MediumItalic;\n    background-color: #2d3436;\n    padding: 0 0 0 10px;\n    font-size: 28px;\n`;\n\nexport const TickersPanel = styled.div`\n    grid-area: tickers;\n    overflow: auto;\n`;\n\nexport const TradesPanel = styled.div`\n    grid-area: trades;\n`;\n\nexport const CandlesPanel = styled.div`\n    grid-area: candles;\n`;\n\nexport const BookPanel = styled.div`\n    grid-area: book;\n`;\n\nexport const DepthPanel = styled.div`\n    grid-area: depth;\n`;\n\nexport const Footer = styled.div`\n    grid-area: footer;\n`;\n\n","import React, { useEffect } from 'react';\nimport { Provider } from 'react-redux';\nimport configureStore from './modules/redux/store';\nimport { AppActions } from './modules/app/actions';\nimport Trades from 'modules/trades/components/Trades';\nimport Tickers from 'modules/ticker/components/Tickers';\nimport CandlesChart from 'modules/candles/components/CandlesChart';\nimport Book from 'modules/book/components/Book';\nimport DepthChart from 'modules/book/components/DepthChart';\nimport Widget from 'core/components/widget';\nimport Diagnostics from 'core/components/Diagnostics';\nimport { Container, Content, Header, TradesPanel, TickersPanel, CandlesPanel, BookPanel, DepthPanel, Footer } from 'App.styled';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham-dark.css';\nimport 'theme/fonts.css';\n\n\nfunction App() {\n  const store = configureStore();\n\n  useEffect(() => {\n    store.dispatch(AppActions.bootstrapApp());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Provider store={store}>\n      <Container>\n        <Content>\n          <Header>Crypto Trader</Header>\n          <TickersPanel><Tickers /></TickersPanel>\n          <TradesPanel><Widget title={'Trades'}><Trades /></Widget></TradesPanel>\n          <CandlesPanel><CandlesChart /></CandlesPanel>\n          <BookPanel><Widget title={'Book'}><Book /></Widget></BookPanel>\n          <DepthPanel><Widget title={'Depth'}><DepthChart /></Widget></DepthPanel>\n          <Footer><Diagnostics /></Footer>\n        </Content>\n      </Container>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}