{"version":3,"sources":["core/transport/types/ConnectionStatus.ts","core/transport/actions.ts","modules/redux/utils.ts","modules/reference-data/actions.ts","core/transport/middleware.ts","core/transport/WsConnectionProxy.ts","core/transport/Connection.ts","modules/reference-data/selectors.ts","modules/selection/actions.ts","modules/ticker/actions.ts","modules/app/actions.ts","modules/trades/actions.ts","modules/app/epics.ts","core/transport/epics.ts","modules/candles/actions.ts","core/transport/selectors.ts","modules/trades/epics.ts","modules/reference-data/epics.ts","modules/ticker/epics.ts","modules/book/actions.ts","modules/candles/epics.ts","modules/selection/selectors.ts","modules/selection/epics.ts","modules/book/epics.ts","core/transport/utils.ts","modules/trades/reducer.ts","core/transport/reducer.ts","modules/reference-data/reducer.ts","modules/ticker/reducer.ts","modules/candles/reducer.ts","modules/selection/reducer.ts","modules/book/reducer.ts","modules/root.ts","modules/redux/store.ts","modules/trades/components/Trades/Trades.styled.ts","theme/style.ts","modules/trades/components/Trades/Trades.tsx","modules/trades/selectors.ts","modules/trades/components/Trades/index.ts","modules/trades/components/Trades/Trades.container.tsx","modules/ticker/components/Tickers/Tickers.styled.ts","modules/ticker/selectors.ts","modules/ticker/components/Ticker/Ticker.styled.ts","core/components/update-highlight/UpdateHightlight.styled.ts","core/components/update-highlight/UpdateHighlight.tsx","core/hooks/usePrevious.ts","modules/reference-data/utils.ts","core/components/trend-indicator/TrendIndicator.styled.ts","core/components/trend-indicator/index.ts","core/components/trend-indicator/TrendIndicator.tsx","modules/ticker/components/Ticker/Ticker.tsx","modules/ticker/components/Ticker/index.ts","modules/ticker/components/Ticker/Ticker.container.ts","modules/ticker/components/Tickers/Tickers.tsx","modules/ticker/components/Tickers/index.ts","modules/ticker/components/Tickers/Tickers.container.ts","modules/candles/components/CandlesChart/CandlesChart.styled.ts","theme/Highstock.ts","modules/candles/components/CandlesChart/CandlesChart.tsx","modules/candles/selectors.ts","modules/candles/components/CandlesChart/index.ts","modules/candles/components/CandlesChart/CandlesChart.container.tsx","modules/book/components/Book/Book.styled.ts","modules/book/components/Book/Book.tsx","modules/book/selectors.ts","modules/book/components/Book/index.ts","modules/book/components/Book/Book.container.tsx","core/hooks/useThrottle.ts","modules/book/components/DepthChart/DepthChart.styled.ts","theme/Highchart.ts","modules/book/components/DepthChart/DepthChart.tsx","modules/book/components/DepthChart/index.ts","modules/book/components/DepthChart/DepthChart.container.tsx","App.styled.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ConnectionStatus","TRANSPORT_ACTION_TYPES","createAction","type","payload","meta","createReducer","handlers","initialState","state","action","hasOwnProperty","REF_DATA_ACTION_TYPES","TransportActions","sendMessage","SEND_MESSAGE","receiveMessage","RECEIVE_MESSAGE","changeConnectionStatus","CHANGE_CONNECTION_STATUS","subscribeToChannel","SUBSCRIBE_TO_CHANNEL","subscribeToChannelAck","SUBSCRIBE_TO_CHANNEL_ACK","subscribeToChannelNack","SUBSCRIBE_TO_CHANNEL_NACK","unsubscribeFromChannel","UNSUBSCRIBE_FROM_CHANNEL","unsubscribeFromChannelAck","UNSUBSCRIBE_FROM_CHANNEL_ACK","unsubscribeFromChannelNack","UNSUBSCRIBE_FROM_CHANNEL_NACK","createWsMiddleware","connection","store","next","onReceive","data","parsedData","JSON","parse","undefined","channelId","Array","isArray","chanId","getState","subscriptions","WsConnectionProxy","realm","socket","onConnectFn","onReceivedFn","onErrorFn","this","WebSocket","onopen","onmessage","onerror","error","Error","message","send","callback","Connection","connectionProxy","start","stop","onConnect","onReceived","getCurrencyPairs","createSelector","refData","currencyPairs","SELECTION_ACTION_TYPES","RefDataActions","loadRefData","LOAD_REF_DATA","loadRefDataAck","LOAD_REF_DATA_ACK","loadRefDataNack","LOAD_REF_DATA_NACK","TICKER_ACTION_TYPES","SelectionActions","selectCurrencyPair","SELECT_CURRENCY_PAIR","APP_ACTION_TYPES","TickerActions","subscribeToTicker","SUBSCRIBE_TO_TICKER","TRADES_ACTION_TYPES","AppActions","bootstrapApp","BOOTSTRAP_APP","combineEpics","action$","state$","pipe","ofType","switchMap","console","log","connect","filter","Connected","merge","of","take","mergeMap","value","tickerActions","map","currencyPair","symbol","from","stringify","EMPTY","concatMap","rootAction","isSubscribing","receiveMessageAction","event","channel","timeout","msg","request","catchError","CANDLES_ACTION_TYPES","TradesActions","subscribeToTrades","SUBSCRIBE_TO_TRADES","unsubscribeFromTrades","UNSUBSCRIBE_FROM_TRADES","getSubscriptions","getSubscription","Object","keys","Number","find","every","key","result","push","warn","fromFetch","response","json","BOOK_ACTION_TYPES","CandlesActions","subscribeToCandles","SUBSCRIBE_TO_CANDLES","unsubscribeFromCandles","UNSUBSCRIBE_FROM_CANDLES","timeframe","join","BookActions","subscribeToBook","SUBSCRIBE_TO_BOOK","unsubscribeFromBook","UNSUBSCRIBE_FROM_BOOK","getCurrencyPair","selection","statePairs$","pairwise","withLatestFrom","oldState","oldCurrencyPair","unsubscribeActions","subscribeActions","prec","isHeartbeat","isSubscriptionMessage","isUnsubscriptionMessage","isErrorMessage","snapshotReducer","id","timestamp","amount","price","updateReducer","trade","existingTradeIndex","findIndex","x","newOrUpdatedTrade","updatedState","slice","splice","tradesReducer","subscriptionsReducer","refDataReducer","tickerReducer","bid","bidSize","ask","askSize","dailyChange","dailyChangeRelative","lastPrice","volume","high","low","open","close","candle","candlesReducer","split","selectionReducer","order","existingOrderIndex","newOrUpdatedOrder","bookReducer","rootEpic","appEpics","refDataEpics","transportEpics","tradeEpics","tickerEpics","candlesEpics","selectionEpics","bookEpics","rootReducer","combineReducers","trades","ticker","candles","book","dependencies","epicMiddleware","createEpicMiddleware","wsMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","Container","styled","div","Palette","Bid","Ask","Positive","Negative","Orange","White","BackgroundColor","Label","Border","Trades","props","columnDefs","headerName","field","hide","width","valueFormatter","params","Math","abs","toString","cellStyle","color","theme","sort","DateTime","fromMillis","toLocaleString","TIME_24_WITH_SECONDS","className","rowData","deltaRowDataMode","getRowNodeId","getTrades","memoize","getTicker","isActive","CurrencyPair","Price","RelativeChange","isPositive","Change","Content","IdenticalPart","UpdateHighlight","changedPartRef","createRef","prev","val","ref","useRef","useEffect","current","usePrevious","useState","identicalPart","changedPart","setParts","prevValue","length","min","index","i","calculateParts","animation","animate","duration","iterations","timeoutId","setTimeout","cancel","clearTimeout","formatCurrencyPair","parseCurrencyPair","Icon","TrendIndicator","isHidden","setIsHidden","icon","Ticker","onClick","isPositiveChange","percentChange","toFixed","selectedCurrencyPair","dispatch","ownProps","Tickers","Highcharts","colors","chart","backgroundColor","stops","xAxis","labels","style","lineColor","minorGridLineColor","tickColor","title","yAxis","gridLineColor","tickWidth","tooltip","borderColor","plotOptions","series","dataLabels","fontSize","marker","boxplot","fillColor","candlestick","errorbar","legend","itemStyle","itemHoverStyle","itemHiddenStyle","credits","drilldown","activeAxisLabelStyle","activeDataLabelStyle","navigation","buttonOptions","symbolStroke","fill","rangeSelector","buttonTheme","stroke","states","hover","select","inputBoxBorderColor","inputStyle","labelStyle","navigator","handles","outlineColor","maskFill","scrollbar","barBackgroundColor","barBorderColor","buttonArrowColor","buttonBackgroundColor","buttonBorderColor","rifleColor","trackBackgroundColor","trackBorderColor","CandlesChart","time","useUTC","selected","buttons","count","text","chartOptions","setChartOptions","rest","a","b","name","upColor","highcharts","options","constructorType","getCandles","Book","orders","bookSelector","getBook","rawBook","bids","asks","maxDepth","max","range","depth","getPricePoints","uniq","computeDepth","pricePoints","orderFilter","reduce","acc","getDepth","t0","performance","now","bidPrices","askPrices","bidDepth","pricePoint","askDepth","t1","useThrottleFn","fn","ms","throttledFn","useMemo","throttle","DepthChart","debouncedDepth","throttledValue","setThrottledValue","setThrottledValueThrottled","useThrottle","height","enabled","autoRotation","area","categories","step","formatter","parseFloat","Header","TickersPanel","TradesPanel","CandlesPanel","BookPanel","DepthPanel","App","createStore","applyMiddleware","run","configureStore","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.ed2c124f.chunk.js","sourcesContent":["export enum ConnectionStatus {\n    Unknown,\n    Connected,\n    Disconnected\n}","import { createAction, ActionUnion } from 'modules/redux/utils';\nimport { ConnectionStatus } from './types/ConnectionStatus';\nimport { TradesChannel, CandlesChannel, TickerChannel, BookChannel } from './types/Channels';\n\nexport enum TRANSPORT_ACTION_TYPES {\n    SEND_MESSAGE = 'TRANSPORT/SEND_MESSAGE',\n    RECEIVE_MESSAGE = 'TRANSPORT/RECEIVE_MESSAGE',\n    CHANGE_CONNECTION_STATUS = 'TRANSPORT/CHANGE_CONNECTION_STATUS',\n    SUBSCRIBE_TO_CHANNEL = 'TRANSPORT/SUBSCRIBE_TO_CHANNEL',\n    SUBSCRIBE_TO_CHANNEL_ACK = 'TRANSPORT/SUBSCRIBE_TO_CHANNEL_ACK',\n    SUBSCRIBE_TO_CHANNEL_NACK = 'TRANSPORT/SUBSCRIBE_TO_CHANNEL_NACK',\n    UNSUBSCRIBE_FROM_CHANNEL= 'TRANSPORT/UNSUBSCRIBE_FROM_CHANNEL',\n    UNSUBSCRIBE_FROM_CHANNEL_ACK = 'TRANSPORT/UNSUBSCRIBE_FROM_CHANNEL_ACK',\n    UNSUBSCRIBE_FROM_CHANNEL_NACK = 'TRANSPORT/UNSUBSCRIBE_FROM_CHANNEL_NACK'\n}\n\ninterface SubscribeToTrades {\n    channel: TradesChannel;\n    symbol: string; \n}\n\ninterface SubscribeToCandles {\n    channel: CandlesChannel;\n    key: string; \n}\n\ninterface SubscribeToTicker {\n    channel: TickerChannel;\n    symbol: string;\n}\n\ninterface SubscribeToBook {\n    channel: BookChannel;\n    symbol: string; \n    prec?: string;\n}\n\nexport type SubscribeToChannelActionPayload = SubscribeToTrades | SubscribeToCandles | SubscribeToTicker | SubscribeToBook;\n\nexport interface SubscribeToChannelAckActionPayload {\n    channel: string;\n    channelId: number;\n    request: any;\n}\n\nexport interface SubscribeToChannelNackActionPayload {\n    error: string;\n}\n\nexport interface ReceiveMessageActionMeta {\n    channel: string;\n    request?: any;\n}\n\nexport interface UnsubscribeFromChannelActionPayload {\n    channelId: number;\n}\n\nexport interface UnsubscribeFromChannelAckActionPayload {\n    channelId: number;\n}\n\nexport const TransportActions = {\n    sendMessage: createAction<TRANSPORT_ACTION_TYPES.SEND_MESSAGE, any>(TRANSPORT_ACTION_TYPES.SEND_MESSAGE),\n    receiveMessage: createAction<TRANSPORT_ACTION_TYPES.RECEIVE_MESSAGE, any, ReceiveMessageActionMeta | undefined>(TRANSPORT_ACTION_TYPES.RECEIVE_MESSAGE),\n    changeConnectionStatus: createAction<TRANSPORT_ACTION_TYPES.CHANGE_CONNECTION_STATUS, ConnectionStatus>(TRANSPORT_ACTION_TYPES.CHANGE_CONNECTION_STATUS),\n    subscribeToChannel: createAction<TRANSPORT_ACTION_TYPES.SUBSCRIBE_TO_CHANNEL, SubscribeToChannelActionPayload>(TRANSPORT_ACTION_TYPES.SUBSCRIBE_TO_CHANNEL),\n    subscribeToChannelAck: createAction<TRANSPORT_ACTION_TYPES.SUBSCRIBE_TO_CHANNEL_ACK, SubscribeToChannelAckActionPayload>(TRANSPORT_ACTION_TYPES.SUBSCRIBE_TO_CHANNEL_ACK),\n    subscribeToChannelNack: createAction<TRANSPORT_ACTION_TYPES.SUBSCRIBE_TO_CHANNEL_NACK, SubscribeToChannelNackActionPayload>(TRANSPORT_ACTION_TYPES.SUBSCRIBE_TO_CHANNEL_NACK),\n    unsubscribeFromChannel: createAction<TRANSPORT_ACTION_TYPES.UNSUBSCRIBE_FROM_CHANNEL, UnsubscribeFromChannelActionPayload>(TRANSPORT_ACTION_TYPES.UNSUBSCRIBE_FROM_CHANNEL),\n    unsubscribeFromChannelAck: createAction<TRANSPORT_ACTION_TYPES.UNSUBSCRIBE_FROM_CHANNEL_ACK, UnsubscribeFromChannelAckActionPayload>(TRANSPORT_ACTION_TYPES.UNSUBSCRIBE_FROM_CHANNEL_ACK),\n    unsubscribeFromChannelNack: createAction<TRANSPORT_ACTION_TYPES.UNSUBSCRIBE_FROM_CHANNEL_NACK>(TRANSPORT_ACTION_TYPES.UNSUBSCRIBE_FROM_CHANNEL_NACK),\n};\n\nexport type TransportActions = ActionUnion<typeof TransportActions>;\nexport type ReceiveMessage = ReturnType<typeof TransportActions.receiveMessage>;\nexport type SendMessage = ReturnType<typeof TransportActions.sendMessage>;\nexport type ChangeConnectionStatus = ReturnType<typeof TransportActions.changeConnectionStatus>;\nexport type SubscribeToChannel = ReturnType<typeof TransportActions.subscribeToChannel>;\nexport type SubscribeToChannelAck = ReturnType<typeof TransportActions.subscribeToChannelAck>;\nexport type SubscribeToChannelNack = ReturnType<typeof TransportActions.subscribeToChannelNack>;\nexport type UnsubscribeFromChannel = ReturnType<typeof TransportActions.unsubscribeFromChannel>;\nexport type UnsubscribeFromChannelAck = ReturnType<typeof TransportActions.unsubscribeFromChannelAck>;\nexport type UnsubscribeFromChannelNack = ReturnType<typeof TransportActions.unsubscribeFromChannelNack>;","import { ActionCreatorsMapObject } from 'redux';\n\nexport interface Action<T extends string> {\n    type: T;\n};\n\nexport interface ActionWithPayload<T extends string, P> extends Action<T> {\n    payload: P;\n}\n\nexport interface ActionWithPayloadAndMeta<T extends string, P, M> extends ActionWithPayload<T, P> {\n    meta: M;\n}\n\ntype ActionFn<T extends string> = () => Action<T>;\n\ntype ActionWithPayloadFn<T extends string, P> = (payload: P) => ActionWithPayload<T, P>;\n\ntype ActionWithPayloadAndMetaFn<T extends string, P, M> = (payload: P, meta: M) => ActionWithPayloadAndMeta<T, P, M>;\n\nexport function createAction<T extends string>(type: T): ActionFn<T>;\n\nexport function createAction<T extends string, P>(type: T): ActionWithPayloadFn<T, P>;\n\nexport function createAction<T extends string, P, M>(type: T): ActionWithPayloadAndMetaFn<T, P, M>;\n\nexport function createAction(type: string) {\n    return (payload?: any, meta?: any) => {\n        if (typeof payload === 'undefined') {\n            return { type };\n        }\n        if (typeof meta === 'undefined') {\n            return {\n                type,\n                payload\n            };\n        }\n\n        return {\n            type,\n            payload,\n            meta\n        };\n    }\n};\n\nexport type ActionUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>;\n\ntype ReducerMap<S, A> = A extends ActionWithPayloadAndMeta<infer T, infer P, infer M>\n    ? { [key in T]: (state: S, action: ActionWithPayloadAndMeta<T, P, M>) => S }\n    : A extends ActionWithPayload<infer T, infer P>\n        ? { [key in T]: (state: S, action: ActionWithPayload<T, P>) => S }\n        : A extends Action<infer T>\n            ? {  [key in T]: (state: S, action: Action<T>) => S }\n            : never;\n\nexport function createReducer<S, A extends { type: string }>(\n  handlers: ReducerMap<S, A>,\n  initialState: S,\n) {\n  return function reducer(state = initialState, action: A): S {\n    if (handlers.hasOwnProperty(action.type)) {\n      return handlers[action.type](state, action);\n    } else {\n      return state;\n    }\n  };\n}","import { createAction, ActionUnion } from 'modules/redux/utils';\n\nexport enum REF_DATA_ACTION_TYPES {\n    LOAD_REF_DATA = 'REF_DATA/LOAD_REF_DATA',\n    LOAD_REF_DATA_ACK = 'REF_DATA/LOAD_REF_DATA_ACK',\n    LOAD_REF_DATA_NACK = 'REF_DATA/LOAD_REF_DATA_NACK'\n}\n\ninterface RefDataLoadAckActionPayload {\n    currencyPairs: string[];\n}\n\nexport const RefDataActions = {\n    loadRefData: createAction<REF_DATA_ACTION_TYPES.LOAD_REF_DATA>(REF_DATA_ACTION_TYPES.LOAD_REF_DATA),\n    loadRefDataAck: createAction<REF_DATA_ACTION_TYPES.LOAD_REF_DATA_ACK, RefDataLoadAckActionPayload>(REF_DATA_ACTION_TYPES.LOAD_REF_DATA_ACK),\n    loadRefDataNack: createAction<REF_DATA_ACTION_TYPES.LOAD_REF_DATA_NACK>(REF_DATA_ACTION_TYPES.LOAD_REF_DATA_NACK),\n};\n\nexport type RefDataActions = ActionUnion<typeof RefDataActions>;\nexport type LoadRefData = ReturnType<typeof RefDataActions.loadRefData>;\nexport type LoadRefDataAck = ReturnType<typeof RefDataActions.loadRefDataAck>;\nexport type LoadRefDataNack = ReturnType<typeof RefDataActions.loadRefDataNack>;","import { Middleware, Dispatch } from 'redux';\nimport { AppActions } from 'modules/app/actions';\nimport { Connection } from './Connection';\nimport { TransportActions } from './actions';\n\nconst createWsMiddleware = ({ connection }: { connection: Connection }): Middleware => store => (next: Dispatch) => (action: AppActions) => {\n    connection.onReceive(data => {\n        const parsedData = JSON.parse(data);\n        let meta = undefined;\n        let channelId = undefined;\n\n        if (Array.isArray(parsedData)) {\n            channelId = parsedData[0];\n        } else if (parsedData.hasOwnProperty('chanId')) {\n            channelId = parsedData.chanId;\n        }\n        if (channelId && store.getState().subscriptions[channelId]) {\n            meta = store.getState().subscriptions[channelId];\n        }\n        next(TransportActions.receiveMessage(parsedData, meta));\n    });\n    return next(action);\n}\n\nexport default createWsMiddleware;","import { ConnectionProxy } from './types/ConnectionProxy';\n\nexport class WsConnectionProxy implements ConnectionProxy {\n    private socket?: WebSocket;\n    private onConnectFn?: () => void;\n    private onReceivedFn?: (data?: any) => void;\n    private onErrorFn?: (error: any) => void;\n\n    constructor(private realm: string) {\n        this.socket = undefined;\n        this.onReceivedFn = undefined;\n    }\n\n    start(): void {\n        this.socket = new WebSocket(this.realm);\n        this.socket.onopen = () => this.onConnectFn && this.onConnectFn();\n        this.socket.onmessage = ({ data }) => {\n            this.onReceivedFn && this.onReceivedFn(data);\n        }\n        this.socket.onerror = error => this.onErrorFn && this.onErrorFn(error);\n    }\n\n    stop(): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    send(message: any): void {\n        if (this.socket) {\n            this.socket.send(message);\n        }\n    }\n\n    onConnect(callback: () => void): void {\n        this.onConnectFn = callback;\n    }\n\n    onReceived(callback: (data: any) => void): void {\n        this.onReceivedFn = callback;\n    }\n\n    onError(callback: (error: any) => void): void {\n        this.onErrorFn = callback;\n    }\n\n}","import { ConnectionProxy } from './types/ConnectionProxy';\n\nexport class Connection {\n    constructor(private connectionProxy: ConnectionProxy) {\n    }\n\n    connect() {\n        this.connectionProxy.start();\n    }\n\n    disconnect() {\n        this.connectionProxy.stop();\n    }\n\n    send(message: any): void {\n        this.connectionProxy.send(message);\n    }\n\n    onConnect(callback: () => void) {\n        this.connectionProxy.onConnect(callback);\n    }\n\n    onReceive(callback: (data: any) => void) {\n        this.connectionProxy.onReceived(callback);\n    }\n}\n","import { createSelector } from 'reselect';\nimport { RootState } from 'modules/root';\n\nconst refDataSelector = (state: RootState) => state.refData;\n\nexport const getCurrencyPairs = createSelector(\n    refDataSelector,\n    refData => refData.currencyPairs\n);\n","import { createAction, ActionUnion } from '../redux/utils';\n\nexport enum SELECTION_ACTION_TYPES {\n    SELECT_CURRENCY_PAIR = 'SELECTION/SELECT_CURRENCY_PAIR'\n}\n\nexport interface SelectCurrencyPairActionPayload {\n    currencyPair: string;\n}\n\nexport const SelectionActions = {\n    selectCurrencyPair: createAction<SELECTION_ACTION_TYPES.SELECT_CURRENCY_PAIR, SelectCurrencyPairActionPayload>(SELECTION_ACTION_TYPES.SELECT_CURRENCY_PAIR)\n};\n\nexport type SelectionActions = ActionUnion<typeof SelectionActions>;\nexport type SelectCurrencyPair = ReturnType<typeof SelectionActions.selectCurrencyPair>;\n\n","import { createAction, ActionUnion } from '../redux/utils';\n\nexport enum TICKER_ACTION_TYPES {\n    SUBSCRIBE_TO_TICKER = 'TICKER/SUBSCRIBE_TO_TICKER'\n}\n\nexport interface SubscribeToTickerActionPayload {\n    symbol: string;\n}\n\nexport const TickerActions = {\n    subscribeToTicker: createAction<TICKER_ACTION_TYPES.SUBSCRIBE_TO_TICKER, SubscribeToTickerActionPayload>(TICKER_ACTION_TYPES.SUBSCRIBE_TO_TICKER)\n};\n\nexport type TickerActions = ActionUnion<typeof TickerActions>;\nexport type SubscribeToTickerAction = ReturnType<typeof TickerActions.subscribeToTicker>;\n\n","import { createAction, ActionUnion } from '../redux/utils';\n\nexport enum APP_ACTION_TYPES {\n    BOOTSTRAP_APP = 'APP/BOOTSTRAP_APP'\n}\n\nexport const AppActions = {\n    bootstrapApp: createAction<APP_ACTION_TYPES.BOOTSTRAP_APP>(APP_ACTION_TYPES.BOOTSTRAP_APP)\n};\n\nexport type AppActions = ActionUnion<typeof AppActions>;\nexport type BoostrapApp = ReturnType<typeof AppActions.bootstrapApp>;\n\n","import { createAction, ActionUnion } from '../redux/utils';\n\nexport enum TRADES_ACTION_TYPES {\n    SUBSCRIBE_TO_TRADES = 'TRADES/SUBSCRIBE_TO_TRADES',\n    UNSUBSCRIBE_FROM_TRADES = 'TRADES/UNSUBSCRIBE_FROM_TRADES'\n}\n\nexport interface SubscribeToTradesActionPayload {\n    symbol: string;\n}\n\nexport interface UnsubscribeFromTradesActionPayload {\n    symbol: string;\n}\n\nexport const TradesActions = {\n    subscribeToTrades: createAction<TRADES_ACTION_TYPES.SUBSCRIBE_TO_TRADES, SubscribeToTradesActionPayload>(TRADES_ACTION_TYPES.SUBSCRIBE_TO_TRADES),\n    unsubscribeFromTrades: createAction<TRADES_ACTION_TYPES.UNSUBSCRIBE_FROM_TRADES, UnsubscribeFromTradesActionPayload>(TRADES_ACTION_TYPES.UNSUBSCRIBE_FROM_TRADES)\n};\n\nexport type TradesActions = ActionUnion<typeof TradesActions>;\nexport type SubscribeToTrades = ReturnType<typeof TradesActions.subscribeToTrades>;\nexport type UnsubscribeFromTrades = ReturnType<typeof TradesActions.unsubscribeFromTrades>;\n","import { merge, of, from } from 'rxjs';\nimport { Epic, ofType, combineEpics } from 'redux-observable';\nimport { switchMap, take, mergeMap, filter } from 'rxjs/operators';\nimport { Actions } from 'modules/root';\nimport { ConnectionStatus } from 'core/transport/types/ConnectionStatus';\nimport { getCurrencyPairs } from 'modules/reference-data/selectors';\nimport { RefDataActions, REF_DATA_ACTION_TYPES } from 'modules/reference-data/actions';\nimport { Dependencies } from 'modules/redux/store';\nimport { SelectionActions } from 'modules/selection/actions';\nimport { TRANSPORT_ACTION_TYPES, ChangeConnectionStatus } from 'core/transport/actions';\nimport { TickerActions } from 'modules/ticker/actions';\nimport { RootState } from './../root';\nimport { APP_ACTION_TYPES } from './actions';\n\nconst bootstrap: Epic<Actions, Actions, RootState, Dependencies> = (action$, state$, { connection }) =>\n  action$.pipe(\n    ofType(APP_ACTION_TYPES.BOOTSTRAP_APP),\n    switchMap(() => {\n      console.log('Boostrap App');\n      connection.connect();\n\n      return action$.pipe(\n        ofType(TRANSPORT_ACTION_TYPES.CHANGE_CONNECTION_STATUS),\n        filter(action => (action as ChangeConnectionStatus).payload === ConnectionStatus.Connected),\n        switchMap(() => merge(\n          of(RefDataActions.loadRefData()),\n          action$.pipe(\n            ofType(REF_DATA_ACTION_TYPES.LOAD_REF_DATA_ACK),\n            take(1),\n            mergeMap(() => {\n              const currencyPairs = getCurrencyPairs(state$.value);\n              const tickerActions = currencyPairs\n                .map(currencyPair => TickerActions.subscribeToTicker({\n                  symbol: currencyPair\n                }));\n              return merge(\n                of(SelectionActions.selectCurrencyPair({currencyPair: currencyPairs[0]})),\n                from(tickerActions)\n              );\n            })\n          )\n        )));\n    })\n  );\n\nexport default combineEpics(\n  bootstrap\n);","import { EMPTY, merge } from 'rxjs';\nimport { Epic, ofType, combineEpics } from 'redux-observable';\nimport { filter, mergeMap, catchError, timeout, take, concatMap, map } from 'rxjs/operators';\nimport { of } from 'rxjs/internal/observable/of';\nimport { Dependencies } from 'modules/redux/store';\nimport { RootState, Actions } from 'modules/root';\nimport { TRANSPORT_ACTION_TYPES, SendMessage, ReceiveMessage, TransportActions, SubscribeToChannel, UnsubscribeFromChannel } from './actions';\n\nexport const WS_SUBSCRIPTION_TIMEOUT_IN_MS = 5000;\n\nexport const handleSendMessage: Epic<Actions, Actions, RootState, Dependencies> = (action$, state$, { connection }) =>\n  action$.pipe(\n    ofType(TRANSPORT_ACTION_TYPES.SEND_MESSAGE),\n    mergeMap(action => {\n      connection.send(JSON.stringify((action as SendMessage).payload));\n      return EMPTY;\n    })\n  );\n\n/*\n    The Bitfinex WS api appears to have some limitations when it comes to subscriptions.\n    Because requests/responses don't have a correlation id, we can't run concurrent requests safely.\n    Therefore, we queue subscription requests and process them sequencially.\n*/\nexport const handleSubscription: Epic<Actions, Actions, RootState, Dependencies> = (action$, state$, { connection }) => {\n  return action$.pipe(\n    filter(action => action.type === TRANSPORT_ACTION_TYPES.SUBSCRIBE_TO_CHANNEL || action.type === TRANSPORT_ACTION_TYPES.UNSUBSCRIBE_FROM_CHANNEL),\n    concatMap(rootAction => {\n      const isSubscribing = rootAction.type === TRANSPORT_ACTION_TYPES.SUBSCRIBE_TO_CHANNEL;\n\n      return merge(\n        action$.pipe(\n          ofType(TRANSPORT_ACTION_TYPES.RECEIVE_MESSAGE),\n          filter(action => {\n            const receiveMessageAction = action as ReceiveMessage;\n            return (isSubscribing && receiveMessageAction.payload.event === 'subscribed' && receiveMessageAction.payload.channel === (rootAction as SubscribeToChannel).payload.channel)\n              || (!isSubscribing && receiveMessageAction.payload.event === 'unsubscribed')\n              || receiveMessageAction.payload.event === 'error'\n          }),\n          take(1),\n          timeout(WS_SUBSCRIPTION_TIMEOUT_IN_MS),\n          map(action => {\n            const receiveMessageAction = action as ReceiveMessage;\n            if (receiveMessageAction.payload.event === 'error') {\n              return isSubscribing\n                ? TransportActions.subscribeToChannelNack({\n                  error: receiveMessageAction.payload.msg\n                })\n                : TransportActions.unsubscribeFromChannelNack();\n            } else {\n              const { channel, chanId: channelId } = receiveMessageAction.payload;\n\n              return isSubscribing\n                ? TransportActions.subscribeToChannelAck({\n                  channel,\n                  channelId,\n                  request: (rootAction as SubscribeToChannel).payload\n                })\n                : TransportActions.unsubscribeFromChannelAck({\n                  channelId\n                });\n            }\n          }),\n          catchError(() => isSubscribing\n            ? of(TransportActions.subscribeToChannelNack({\n              error: 'Timeout'\n            }))\n            : of(TransportActions.unsubscribeFromChannelNack())\n          )\n        ),\n        isSubscribing\n          ? of(TransportActions.sendMessage({\n            event: 'subscribe',\n            ...(rootAction as SubscribeToChannel).payload\n          }))\n          : of(TransportActions.sendMessage({\n            event: 'unsubscribe',\n            chanId: (rootAction as UnsubscribeFromChannel).payload.channelId\n          }))\n      );\n    }),\n\n  );\n}\n\nexport default combineEpics(\n  handleSendMessage,\n  handleSubscription\n);","import { createAction, ActionUnion } from '../redux/utils';\n\ntype Timeframe = '1m' | '5m' | '15m' | '30m' | '1h' | '3h' | '6h' | '12h' | '1D' | '7D' | '14D' | '1M';\n\nexport enum CANDLES_ACTION_TYPES {\n    SUBSCRIBE_TO_CANDLES = 'CANDLES/SUBSCRIBE_TO_CANDLES',\n    UNSUBSCRIBE_FROM_CANDLES = 'CANDLES/UNSUBSCRIBE_FROM_CANDLES'\n}\n\nexport interface SubscribeToCandlesActionPayload {\n    symbol: string;\n    timeframe: Timeframe;\n}\n\nexport interface UnsubscribeFromCandlesActionPayload {\n    symbol: string;\n    timeframe: Timeframe;\n}\n\nexport const CandlesActions = {\n    subscribeToCandles: createAction<CANDLES_ACTION_TYPES.SUBSCRIBE_TO_CANDLES, SubscribeToCandlesActionPayload>(CANDLES_ACTION_TYPES.SUBSCRIBE_TO_CANDLES),\n    unsubscribeFromCandles: createAction<CANDLES_ACTION_TYPES.UNSUBSCRIBE_FROM_CANDLES, UnsubscribeFromCandlesActionPayload>(CANDLES_ACTION_TYPES.UNSUBSCRIBE_FROM_CANDLES),\n};\n\nexport type CandlesActions = ActionUnion<typeof CandlesActions>;\nexport type SubscribeToCandles = ReturnType<typeof CandlesActions.subscribeToCandles>;\nexport type UnsubscribeFromCandles = ReturnType<typeof CandlesActions.unsubscribeFromCandles>;\n","import { createSelector } from 'reselect';\nimport { RootState } from 'modules/root';\n\nconst subscriptionsSelector = (state: RootState) => state.subscriptions;\n\nexport const getSubscriptions = createSelector(\n    subscriptionsSelector,\n    subscriptions => subscriptions\n)\n\nexport const getSubscription = createSelector(\n    getSubscriptions,\n    subscriptions => (channel: string, request: any) => {\n        const channelIds = Object.keys(subscriptions).map(Number);\n\n        return channelIds.find(channelId => {\n            return subscriptions[channelId].channel === channel\n                && Object.keys(request).every(key => request[key] === subscriptions[channelId].request[key]);\n        });\n    }\n)\n\n","import { UnsubscribeFromTrades } from './actions';\nimport { TradesChannel } from 'core/transport/types/Channels';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { Epic, ofType, combineEpics } from 'redux-observable';\nimport { RootState, Actions } from 'modules/root';\nimport { SubscribeToTrades, TRADES_ACTION_TYPES } from 'modules/trades/actions';\nimport { Dependencies } from './../redux/store';\nimport { TransportActions } from 'core/transport/actions';\nimport { getSubscription } from 'core/transport/selectors';\nimport { from } from 'rxjs';\n\nexport const subscribeToTrades: Epic<Actions, Actions, RootState, Dependencies> = (action$) =>\n    action$.pipe(\n        ofType(TRADES_ACTION_TYPES.SUBSCRIBE_TO_TRADES),\n        map(action => {\n            const { symbol } = (action as SubscribeToTrades).payload;\n            const msg = {\n                channel: 'trades' as TradesChannel,\n                symbol: `t${symbol}`\n            };\n            return TransportActions.subscribeToChannel(msg);\n        })\n    );\n\nexport const unsubscribeFromTrades: Epic<Actions, Actions, RootState, Dependencies> = (action$, state$) =>\n    action$.pipe(\n        ofType(TRADES_ACTION_TYPES.UNSUBSCRIBE_FROM_TRADES),\n        mergeMap(action => {\n            const { symbol } = (action as UnsubscribeFromTrades).payload;\n            const result: Actions[] = [];\n            const channelId = getSubscription(state$.value)('trades', {\n                symbol: `t${symbol}`\n            });\n            if (typeof channelId !== 'undefined') {\n                result.push(\n                    TransportActions.unsubscribeFromChannel({\n                        channelId\n                    })\n                );\n            } else {\n                console.warn('Failed to find trades subscription');\n            }\n            return from(result);\n        })\n    );\n\nexport default combineEpics(\n    subscribeToTrades,\n    unsubscribeFromTrades\n);","import { Epic, ofType, combineEpics } from 'redux-observable';\nimport { switchMap, map, catchError } from 'rxjs/operators';\nimport { fromFetch } from 'rxjs/fetch';\nimport { of } from 'rxjs';\nimport { Dependencies } from 'modules/redux/store';\nimport { RootState, Actions } from 'modules/root';\nimport { REF_DATA_ACTION_TYPES, RefDataActions } from './actions';\n\nexport const loadRefData: Epic<Actions, Actions, RootState, Dependencies> = (action$) =>\n  action$.pipe(\n    ofType(REF_DATA_ACTION_TYPES.LOAD_REF_DATA),\n    switchMap(() => {\n      return fromFetch('/data/currencyPairs.json')\n        .pipe(\n          switchMap(response => response.json()),\n          map(result => RefDataActions.loadRefDataAck({\n            currencyPairs: result as string[]\n          })),\n          catchError(() => of(RefDataActions.loadRefDataNack()))\n        );\n    })\n  );\n\n\nexport default combineEpics(\n  loadRefData\n);","import { map } from 'rxjs/operators';\nimport { Epic, ofType, combineEpics } from 'redux-observable';\nimport { TransportActions } from 'core/transport/actions';\nimport { TickerChannel } from 'core/transport/types/Channels';\nimport { RootState, Actions } from 'modules/root';\nimport { SubscribeToTickerAction, TICKER_ACTION_TYPES } from './actions';\nimport { Dependencies } from './../redux/store';\n\nexport const subscribeToTicker: Epic<Actions, Actions, RootState | undefined, Dependencies | undefined> = (action$) =>\n    action$.pipe(\n        ofType(TICKER_ACTION_TYPES.SUBSCRIBE_TO_TICKER),\n        map(action => {\n            const { symbol } = (action as SubscribeToTickerAction).payload;\n            const msg = {\n                channel: 'ticker' as TickerChannel,\n                symbol: `t${symbol}`\n            };\n            return TransportActions.subscribeToChannel(msg);\n        })\n    );\n\nexport default combineEpics(\n    subscribeToTicker\n);","import { unsubscribeFromBook } from './epics';\nimport { createAction, ActionUnion } from '../redux/utils';\n\nexport enum BOOK_ACTION_TYPES {\n    SUBSCRIBE_TO_BOOK = 'BOOK/SUBSCRIBE_TO_BOOK',\n    UNSUBSCRIBE_FROM_BOOK = 'BOOK/UNSUBSCRIBE_FROM_BOOK'\n}\n\nexport interface SubscribeToBookActionPayload {\n    symbol: string;\n}\n\nexport interface UnsubscribeFromBookActionPayload {\n    symbol: string;\n}\n\nexport const BookActions = {\n    subscribeToBook: createAction<BOOK_ACTION_TYPES.SUBSCRIBE_TO_BOOK, SubscribeToBookActionPayload>(BOOK_ACTION_TYPES.SUBSCRIBE_TO_BOOK),\n    unsubscribeFromBook: createAction<BOOK_ACTION_TYPES.UNSUBSCRIBE_FROM_BOOK, UnsubscribeFromBookActionPayload>(BOOK_ACTION_TYPES.UNSUBSCRIBE_FROM_BOOK)\n};\n\nexport type BookActions = ActionUnion<typeof BookActions>;\nexport type SubscribeToBook = ReturnType<typeof BookActions.subscribeToBook>;\nexport type UnsubscribeFromBook = ReturnType<typeof BookActions.unsubscribeFromBook>;\n","import { from } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { Epic, ofType, combineEpics } from 'redux-observable';\nimport { RootState, Actions } from 'modules/root';\nimport { getSubscription } from 'core/transport/selectors';\nimport { CandlesChannel } from 'core/transport/types/Channels';\nimport { TransportActions } from 'core/transport/actions';\nimport { SubscribeToCandles, CANDLES_ACTION_TYPES, UnsubscribeFromCandles } from './actions';\nimport { Dependencies } from './../redux/store';\n\nexport const subscribeToCandles: Epic<Actions, Actions, RootState | undefined, Dependencies | undefined> = (action$) =>\n    action$.pipe(\n        ofType(CANDLES_ACTION_TYPES.SUBSCRIBE_TO_CANDLES),\n        map(action => {\n            const { symbol, timeframe } = (action as SubscribeToCandles).payload;\n            const msg = {\n                channel: 'candles' as CandlesChannel,\n                key: ['trade', timeframe, `t${symbol}`].join(':')\n            };\n            return TransportActions.subscribeToChannel(msg);\n        })\n    );\n\n\nexport const unsubscribeFromCandles: Epic<Actions, Actions, RootState, Dependencies> = (action$, state$) =>\n    action$.pipe(\n        ofType(CANDLES_ACTION_TYPES.UNSUBSCRIBE_FROM_CANDLES),\n        mergeMap(action => {\n            const { symbol, timeframe } = (action as UnsubscribeFromCandles).payload;\n\n            const result: Actions[] = [];\n            const channelId = getSubscription(state$.value)('candles', {\n                key: ['trade', timeframe, `t${symbol}`].join(':')\n            });\n            if (typeof channelId !== 'undefined') {\n                result.push(\n                    TransportActions.unsubscribeFromChannel({\n                        channelId\n                    })\n                );\n            } else {\n                console.warn('Failed to find candles subscription');\n            }\n            return from(result);\n        })\n    );\n\nexport default combineEpics(\n    subscribeToCandles,\n    unsubscribeFromCandles\n);","import { createSelector } from 'reselect';\nimport { RootState } from 'modules/root';\n\nconst selectionSelector = (state: RootState) => state.selection;\n\nexport const getCurrencyPair = createSelector(\n    selectionSelector,\n    selection => selection.currencyPair\n)\n","import { from } from 'rxjs';\nimport { Epic, ofType, combineEpics } from 'redux-observable';\nimport { switchMap, pairwise, withLatestFrom } from 'rxjs/operators';\nimport { Actions } from 'modules/root';\nimport { TradesActions } from 'modules/trades/actions';\nimport { CandlesActions } from 'modules/candles/actions';\nimport { BookActions } from 'modules/book/actions';\nimport { RootState } from './../root';\nimport { Dependencies } from './../redux/store';\nimport { SELECTION_ACTION_TYPES, SelectCurrencyPair } from './actions';\nimport { getCurrencyPair } from './selectors';\n\nconst handleSelection: Epic<Actions, Actions, RootState, Dependencies> = (action$, state$) => {\n  const statePairs$ = state$.pipe(pairwise());\n  return action$.pipe(\n    ofType(SELECTION_ACTION_TYPES.SELECT_CURRENCY_PAIR),\n    withLatestFrom(statePairs$),\n    switchMap(([action, [oldState, newState]]) => {\n      const oldCurrencyPair = getCurrencyPair(oldState);\n      const { currencyPair } = (action as SelectCurrencyPair).payload;\n      const unsubscribeActions = [];\n      if (oldCurrencyPair) {\n        unsubscribeActions.push(\n          CandlesActions.unsubscribeFromCandles({symbol: oldCurrencyPair, timeframe: '1m'}),\n          TradesActions.unsubscribeFromTrades({ symbol: oldCurrencyPair }),\n          BookActions.unsubscribeFromBook({ symbol: oldCurrencyPair })\n        );\n      }\n\n      const subscribeActions = [\n        CandlesActions.subscribeToCandles({ symbol: currencyPair, timeframe: '1m' }),\n        TradesActions.subscribeToTrades({ symbol: currencyPair }),\n        BookActions.subscribeToBook({ symbol: currencyPair })\n      ]\n\n      return from([\n        ...unsubscribeActions,\n        ...subscribeActions\n      ]);\n\n    })\n  );\n}\n\nexport default combineEpics(\n  handleSelection\n);","import { from } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { Epic, ofType, combineEpics } from 'redux-observable';\nimport { getSubscription } from 'core/transport/selectors';\nimport { TransportActions } from 'core/transport/actions';\nimport { BookChannel } from 'core/transport/types/Channels';\nimport { RootState, Actions } from 'modules/root';\nimport { SubscribeToBook, BOOK_ACTION_TYPES, UnsubscribeFromBook } from './actions';\nimport { Dependencies } from './../redux/store';\n\nexport const subscribeToBook: Epic<Actions, Actions, RootState | undefined, Dependencies | undefined> = (action$) =>\n    action$.pipe(\n        ofType(BOOK_ACTION_TYPES.SUBSCRIBE_TO_BOOK),\n        map(action => {\n            const { symbol } = (action as SubscribeToBook).payload;\n            const msg = {\n                channel: 'book' as BookChannel,\n                symbol: `t${symbol}`,\n                prec: 'R0'\n            };\n            return TransportActions.subscribeToChannel(msg);\n        })\n    );\n\n\nexport const unsubscribeFromBook: Epic<Actions, Actions, RootState, Dependencies> = (action$, state$) =>\naction$.pipe(\n    ofType(BOOK_ACTION_TYPES.UNSUBSCRIBE_FROM_BOOK),\n    mergeMap(action => {\n        const { symbol } = (action as UnsubscribeFromBook).payload;\n        const result: Actions[] = [];\n        const channelId = getSubscription(state$.value)('book', {\n            symbol: `t${symbol}`\n        });\n        if (typeof channelId !== 'undefined') {\n            result.push(\n                TransportActions.unsubscribeFromChannel({\n                    channelId\n                })\n            );\n        } else {\n            console.warn('Failed to find book subscription');\n        }\n        return from(result);\n    })\n);\n\nexport default combineEpics(\n    subscribeToBook,\n    unsubscribeFromBook\n);","import { ReceiveMessage } from './actions';\n\nexport function isHeartbeat(action: ReceiveMessage) {\n    return Array.isArray(action.payload) && action.payload[1] === 'hb';\n}\n\nexport function isSubscriptionMessage(action: ReceiveMessage) {\n    return action.payload.event === 'subscribed';\n}\n\nexport function isUnsubscriptionMessage(action: ReceiveMessage) {\n    return action.payload.event === 'unsubscribed';\n}\n\nexport function isErrorMessage(action: ReceiveMessage) {\n    return action.payload.event === 'error';\n}\n","import { createReducer } from 'modules/redux/utils';\nimport { TRANSPORT_ACTION_TYPES } from 'core/transport/actions';\nimport { isHeartbeat, isSubscriptionMessage, isUnsubscriptionMessage, isErrorMessage } from 'core/transport/utils';\nimport { ReceiveMessage } from 'core/transport/actions';\nimport { Actions } from './../root';\nimport { Trade } from './types/Trade';\n\ntype SymbolState = Trade[];\n\nexport interface TradesState {\n    [currencyPair: string]: SymbolState;\n}\n\nconst initialState: TradesState = {\n}\n\nfunction snapshotReducer(state: SymbolState, action: ReceiveMessage) {\n    const [, trades] = action.payload;\n    return trades.map(([id, timestamp, amount, price]: number[]) => ({\n        id,\n        timestamp,\n        amount,\n        price\n    }));\n}\n\nfunction updateReducer(state: SymbolState = [], action: ReceiveMessage) {\n    const [, , trade] = action.payload;\n    const [id, timestamp, amount, price] = trade;\n    const existingTradeIndex = state.findIndex(x => x.id === id);\n    const newOrUpdatedTrade = {\n        id,\n        timestamp,\n        amount,\n        price\n    };\n\n    if (existingTradeIndex >= 0) {\n        const updatedState = state.slice();\n        updatedState.splice(existingTradeIndex, 1, newOrUpdatedTrade);\n        return updatedState;\n    } else {\n        return [\n            ...state,\n            newOrUpdatedTrade\n        ];\n    }\n}\n\nconst receiveMessageReducer = (state: TradesState, action: ReceiveMessage) => {\n    if (isHeartbeat(action) || isSubscriptionMessage(action) || isErrorMessage(action)) {\n        return state;\n    }\n\n    const { channel, request } = action.meta || {};\n    if (channel === 'trades') {\n        const { symbol } = request;    \n        const currencyPair = symbol.slice(1);\n        if (isUnsubscriptionMessage(action)) {\n            const updatedState = {\n                ...state\n            };\n            delete updatedState[currencyPair];\n            return updatedState;\n        }     \n\n        const symbolReducer = Array.isArray(action.payload[1]) ? snapshotReducer : updateReducer;\n        const result = symbolReducer(state[currencyPair], action);\n\n        return {\n            ...state,\n            [currencyPair]: result\n        };\n    }\n\n    return state;\n}\n\nexport const tradesReducer = createReducer<TradesState, Actions>({\n    [TRANSPORT_ACTION_TYPES.RECEIVE_MESSAGE]: receiveMessageReducer\n}, initialState);\n\nexport default tradesReducer;","import { createReducer } from 'modules/redux/utils';\nimport { Actions } from 'modules/root';\nimport { TRANSPORT_ACTION_TYPES } from 'core/transport/actions';\nimport { SubscribeToChannelAck, UnsubscribeFromChannelAck } from './actions';\n\nexport interface SubscriptionState {\n    [key: number]: { channel: string, request: any };\n}\n\nconst initialState: SubscriptionState = {\n};\n\nconst subscribeToChannelAckReducer = (state: SubscriptionState, action: SubscribeToChannelAck) => {\n    const { request, channel, channelId } = action.payload;\n\n    return {\n        ...state,\n        [channelId]: {\n            channel,\n            request\n        }\n    };\n};\n\nconst unsubscribeFromChannelAckReducer = (state: SubscriptionState, action: UnsubscribeFromChannelAck) => {\n    const { channelId } = action.payload;\n\n    const updatedState = {\n        ...state\n    };\n    delete updatedState[channelId];\n    return updatedState;\n}\n\nexport const subscriptionsReducer = createReducer<SubscriptionState, Actions>({\n    [TRANSPORT_ACTION_TYPES.SUBSCRIBE_TO_CHANNEL_ACK]: subscribeToChannelAckReducer,\n    [TRANSPORT_ACTION_TYPES.UNSUBSCRIBE_FROM_CHANNEL_ACK]: unsubscribeFromChannelAckReducer\n}, initialState);\n\nexport default subscriptionsReducer;","import { Actions } from 'modules/root';\nimport { REF_DATA_ACTION_TYPES, LoadRefDataAck } from './actions';\nimport { createReducer } from 'modules/redux/utils';\n\ninterface RefDataState {\n    currencyPairs: string[];\n}\n\nconst initialState: RefDataState = {\n    currencyPairs: []\n}\n\nconst loadRefDataReducer = (state: RefDataState, action: LoadRefDataAck) => {\n    const { currencyPairs } = action.payload;\n\n    return {\n        ...state,\n        currencyPairs\n    };\n}\n\nexport const refDataReducer = createReducer<RefDataState, Actions>({\n    [REF_DATA_ACTION_TYPES.LOAD_REF_DATA_ACK]: loadRefDataReducer\n}, initialState);\n\nexport default refDataReducer;","import { createReducer } from 'modules/redux/utils';\nimport { Actions } from './../root';\nimport { TRANSPORT_ACTION_TYPES, ReceiveMessage } from 'core/transport/actions';\nimport { isHeartbeat } from 'core/transport/utils';\nimport { Ticker } from './types/Ticker';\n\nexport interface TickerState {\n    [symbol: string]: Ticker;\n}\n\nconst initialState: TickerState = {\n}\n\nconst receiveMessageReducer = (state: TickerState, action: ReceiveMessage) => {\n    if (isHeartbeat(action)) {\n        return state;\n    }\n\n    const { channel, request } = action.meta || {};\n    if (channel === 'ticker') {\n        const { symbol } = request;                \n        const currencyPair = symbol.slice(1);\n        const [, [bid, bidSize, ask, askSize, dailyChange, dailyChangeRelative, lastPrice, volume, high, low]] = action.payload;\n\n        return {\n            ...state,\n            [currencyPair]: {\n                bid,\n                bidSize,\n                ask,\n                askSize,\n                dailyChange,\n                dailyChangeRelative,\n                lastPrice,\n                volume,\n                high,\n                low\n            }\n        };\n    }\n\n    return state;\n}\n\nexport const tickerReducer = createReducer<TickerState, Actions>({\n    [TRANSPORT_ACTION_TYPES.RECEIVE_MESSAGE]: receiveMessageReducer\n}, initialState);\n\nexport default tickerReducer;","import { createReducer } from 'modules/redux/utils';\nimport { TRANSPORT_ACTION_TYPES } from 'core/transport/actions';\nimport { isHeartbeat, isSubscriptionMessage, isUnsubscriptionMessage, isErrorMessage } from 'core/transport/utils';\nimport { ReceiveMessage } from 'core/transport/actions';\nimport { Actions } from './../root';\nimport { Candle } from './types/Candle';\n\ntype SymbolState = Candle[];\n\nexport interface CandlesState {\n    [currencyPair: string]: SymbolState;\n}\n\nconst initialState: CandlesState = {\n}\n\nfunction snapshotReducer(state: SymbolState, action: ReceiveMessage) {\n    const [, candles] = action.payload;\n    return candles.map(([timestamp, open, close, high, low, volume]: number[]) => ({\n        timestamp, open, close, high, low, volume\n    }));\n}\n\nfunction updateReducer(state: SymbolState = [], action: ReceiveMessage) {\n    const [, candle] = action.payload;\n    const [timestamp, open, close, high, low, volume] = candle;\n\n    const updatedState = state.slice();\n    updatedState.push({\n        timestamp,\n        open,\n        close,\n        high,\n        low,\n        volume\n    });\n    return updatedState;\n}\n\nconst receiveMessageReducer = (state: CandlesState, action: ReceiveMessage) => {\n    if (isHeartbeat(action) || isSubscriptionMessage(action) || isErrorMessage(action)) {\n        return state;\n    }\n\n    const { channel, request } = action.meta || {};\n    if (channel === 'candles') {\n        const { key } = request;\n        const [, , symbol] = key.split(':');\n        const currencyPair = symbol.slice(1);\n\n        if (isUnsubscriptionMessage(action)) {\n            const updatedState = {\n                ...state\n            };\n            delete updatedState[currencyPair];\n            return updatedState;\n        }\n\n        const symbolReducer = Array.isArray(action.payload[1][0]) ? snapshotReducer : updateReducer;\n        const result = symbolReducer(state[currencyPair], action);\n\n        return {\n            ...state,\n            [currencyPair]: result\n        };\n    }\n\n    return state;\n}\n\nexport const candlesReducer = createReducer<CandlesState, Actions>({\n    [TRANSPORT_ACTION_TYPES.RECEIVE_MESSAGE]: receiveMessageReducer\n}, initialState);\n\nexport default candlesReducer;","import { Actions } from 'modules/root';\nimport { SELECTION_ACTION_TYPES } from './actions';\n\ninterface SelectionState {\n    currencyPair?: string;\n}\n\nconst initialState: SelectionState = {\n}\n\nexport function selectionReducer(\n    state = initialState,\n    action: Actions\n) {\n    switch (action.type) {\n        case SELECTION_ACTION_TYPES.SELECT_CURRENCY_PAIR: {\n            const { currencyPair } = action.payload;\n\n            return {\n                ...state,\n                currencyPair\n            }\n        }\n\n        default:\n            return state;\n    }\n}\n\nexport default selectionReducer;","import { Actions } from 'modules/root';\nimport { TRANSPORT_ACTION_TYPES } from 'core/transport/actions';\nimport { createReducer } from 'modules/redux/utils';\nimport { isHeartbeat, isSubscriptionMessage, isUnsubscriptionMessage, isErrorMessage } from 'core/transport/utils';\nimport { ReceiveMessage } from 'core/transport/actions';\nimport { Order } from './types/Order';\n\ntype SymbolState = Order[];\n\nexport interface BookState {\n    [currencyPair: string]: SymbolState;\n}\n\nconst initialState: BookState = {\n}\n\nfunction snapshotReducer(state: SymbolState, action: ReceiveMessage) {\n    const [, orders] = action.payload;\n    return orders.map(([id, price, amount]: any[]) => ({\n        id,\n        price,\n        amount\n    }));\n}\n\nfunction updateReducer(state: SymbolState = [], action: ReceiveMessage) {\n    const [, order] = action.payload;\n    const [id, price, amount] = order;\n    const existingOrderIndex = state.findIndex(x => x.id === id);\n    const newOrUpdatedOrder = {\n        id,\n        price,\n        amount\n    };\n\n    if (price === 0 && existingOrderIndex >= 0) {\n        // remove\n        const updatedState = state.slice();\n        updatedState.splice(existingOrderIndex, 1);\n        return updatedState;\n    } else if (existingOrderIndex >= 0) {\n        // update\n        const updatedState = state.slice();\n        updatedState.splice(existingOrderIndex, 1, newOrUpdatedOrder);\n        return updatedState;\n    } else {\n        // add\n        return [\n            ...state,\n            newOrUpdatedOrder\n        ];\n    }\n}\n\nconst receiveMessageReducer = (state: BookState, action: ReceiveMessage) => {\n    if (isHeartbeat(action) || isSubscriptionMessage(action) || isErrorMessage(action)) {\n        return state;\n    }\n\n    const { channel, request } = action.meta || {};\n\n    if (channel === 'book') {\n        const { symbol } = request;    \n        const currencyPair = symbol.slice(1);  \n\n        if (isUnsubscriptionMessage(action)) {\n            const updatedState = {\n                ...state\n            };\n            delete updatedState[currencyPair];\n            return updatedState;\n        }\n\n        const symbolReducer = Array.isArray(action.payload[1][0]) ? snapshotReducer : updateReducer;\n        const result = symbolReducer(state[currencyPair], action);\n        return {\n            ...state,\n            [currencyPair]: result\n        };\n    }\n\n    return state;\n}\n\nexport const bookReducer = createReducer<BookState, Actions>({\n    [TRANSPORT_ACTION_TYPES.RECEIVE_MESSAGE]: receiveMessageReducer\n}, initialState);\n\nexport default bookReducer;","import { combineEpics } from 'redux-observable';\nimport { combineReducers } from 'redux';\nimport { BookActions } from './book/actions';\nimport { SelectionActions } from './selection/actions';\nimport { CandlesActions } from './candles/actions';\nimport { TickerActions } from './ticker/actions';\nimport { RefDataActions } from './reference-data/actions';\nimport appEpics from './app/epics';\nimport transportEpics from '../core/transport/epics';\nimport tradeEpics from './trades/epics';\nimport refDataEpics from './reference-data/epics';\nimport tickerEpics from './ticker/epics';\nimport candlesEpics from './candles/epics';\nimport selectionEpics from './selection/epics';\nimport bookEpics from './book/epics';\nimport { AppActions } from './app/actions';\nimport { TradesActions } from './trades/actions';\nimport { TransportActions } from 'core/transport/actions';\nimport { tradesReducer } from './trades/reducer';\nimport { subscriptionsReducer } from 'core/transport/reducer';\nimport { refDataReducer } from './reference-data/reducer';\nimport { tickerReducer } from './ticker/reducer';\nimport { candlesReducer } from './candles/reducer';\nimport { selectionReducer } from './selection/reducer';\nimport { bookReducer } from './book/reducer';\n\nexport const rootEpic = combineEpics(\n  appEpics,\n  refDataEpics,\n  transportEpics,\n  tradeEpics,\n  tickerEpics,\n  candlesEpics,\n  selectionEpics,\n  bookEpics\n);\n\nexport const rootReducer = combineReducers({\n  refData: refDataReducer,\n  subscriptions: subscriptionsReducer,\n  trades: tradesReducer,\n  ticker: tickerReducer,\n  candles: candlesReducer,\n  selection: selectionReducer,\n  book: bookReducer\n});\n\nexport type Actions = \n    AppActions\n  | RefDataActions\n  | TransportActions\n  | TradesActions\n  | TickerActions\n  | CandlesActions\n  | SelectionActions\n  | BookActions;\n\nexport type RootState = ReturnType<typeof rootReducer>;","import { createStore, applyMiddleware, compose } from 'redux';\nimport { createEpicMiddleware } from 'redux-observable';\nimport { ConnectionStatus } from 'core/transport/types/ConnectionStatus';\nimport createWsMiddleware from 'core/transport/middleware';\nimport { WsConnectionProxy } from 'core/transport/WsConnectionProxy';\nimport { Connection } from 'core/transport/Connection';\nimport { TransportActions } from 'core/transport/actions';\nimport { Actions, RootState } from './../root';\nimport { rootEpic, rootReducer } from '../root';\n\nconst connectionProxy = new WsConnectionProxy('wss://api-pub.bitfinex.com/ws/2');\n\nconst connection = new Connection(connectionProxy);\n\nconst dependencies = {\n  connection\n};\n\nexport type Dependencies = typeof dependencies;\n\nconst epicMiddleware = createEpicMiddleware<\n  Actions,\n  Actions,\n  RootState,\n  Dependencies\n>({\n  dependencies\n});\n\nconst wsMiddleware = createWsMiddleware({connection});\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default function configureStore() {\n  const store = createStore(\n    rootReducer,\n    composeEnhancers(\n      applyMiddleware(wsMiddleware, epicMiddleware)\n    )\n  );\n\n  connection.onConnect(() => {\n    store.dispatch(TransportActions.changeConnectionStatus(ConnectionStatus.Connected));\n    console.log('Connected');\n  });\n\n  epicMiddleware.run(rootEpic);\n\n  return store;\n}","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    width: 100%;\n    height: 100%;\n    font-family: FiraSans-Light;\n`;\n","const Palette = {\n    Bid: '#00AD08',\n    Ask: '#FF264D',\n    Positive: '#00AD08',\n    Negative: '#FF264D',\n    Orange: '#ffa41b',\n    White: '#fff',\n    BackgroundColor: '#222',\n    Label: 'rgba(245, 245, 245, 0.64)',\n    Border: '#424242',\n};\n\nexport default Palette;","import React, { FC } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport { ColDef } from 'ag-grid-community';\nimport { DateTime } from 'luxon';\nimport { Trade } from '../../types/Trade';\nimport { Container } from './Trades.styled';\nimport theme from 'theme/style';\n\nexport interface Props {\n    trades: Trade[];\n}\n\nconst Trades: FC<Props> = props => {\n    const { trades } = props;\n    const columnDefs: ColDef[] = [{\n        headerName: 'Id',\n        field: 'id',\n        hide: true\n    }, {\n        headerName: 'Amount',\n        field: 'amount',\n        width: 120,\n        valueFormatter: params => Math.abs(params.value).toString(),\n        cellStyle: params => {\n            return {\n                color: params.value < 0 ? theme.Ask : theme.Bid\n            }\n        }\n    }, {\n        headerName: 'Price',\n        field: 'price'\n    }, {\n        headerName: 'Time',\n        field: 'timestamp',\n        sort: 'desc',\n        width: 90,\n        valueFormatter: params => DateTime.fromMillis(params.value).toLocaleString(DateTime.TIME_24_WITH_SECONDS),\n        cellStyle: () => ({\n            color: 'rgba(245, 245, 245, 0.64)'\n        })\n    }];\n\n    return (\n        <Container className='ag-theme-balham-dark'>\n            <AgGridReact\n                columnDefs={columnDefs}\n                rowData={trades}\n                deltaRowDataMode={true}\n                getRowNodeId={data => data.id}\n            >\n            </AgGridReact>\n        </Container>\n    );\n}\n\nexport default Trades;","import { createSelector } from 'reselect';\nimport { memoize } from 'lodash';\nimport { RootState } from 'modules/root';\n\nconst tradesSelector = (state: RootState) => state.trades;\n\nexport const getTrades = createSelector(\n    tradesSelector,\n    trades => memoize(\n        (symbol: string) => trades[symbol]\n    )\n)\n","import Trades from './Trades.container';\n\nexport default Trades;","import { connect } from 'react-redux';\nimport { RootState } from 'modules/root';\nimport Trades, { Props } from './Trades'\nimport { getTrades } from '../../selectors';\nimport { getCurrencyPair } from 'modules/selection/selectors';\n\nconst mapStateToProps = (state: RootState): Props => {\n    const currencyPair = getCurrencyPair(state);\n    const trades = currencyPair ? getTrades(state)(currencyPair) : [];\n\n    return {\n        trades\n    };\n}\n\nexport default connect(mapStateToProps)(Trades);","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(270px, 1fr));\n    gap: 10px;\n`;","import { createSelector } from 'reselect';\nimport { memoize } from 'lodash';\nimport { RootState } from 'modules/root';\n\nconst tickerSelector = (state: RootState) => state.ticker;\n\nexport const getTicker = createSelector(\n    tickerSelector,\n    ticker => memoize(\n        (symbol: string) => ticker[symbol]\n    )\n)\n","import styled from 'styled-components';\nimport Palette from 'theme/style';\n\nexport const Container = styled.div<{\n    isActive: boolean;\n}>`\n    cursor: pointer;\n    display: grid;\n    grid-template-rows: 30px 1fr;\n    min-height: 60px;\n    grid-template-columns: repeat(2, 1fr);\n    grid-template-areas: \n        \"currencyPair price\"\n        \"relativeChange change\";\n    font-size: 12px;\n    padding: 10px 10px 5px 10px;\n    border: 1px solid ${({isActive}) => isActive ? Palette.Orange : Palette.Border};\n\n    &:hover {\n        background-color: #2d3436;\n    }\n`;\n\nexport const CurrencyPair = styled.div`\n    color: ${Palette.White};\n    grid-area: currencyPair;\n`;\n\nexport const Price = styled.div`\n    color: ${Palette.White};\n    grid-area: price;\n    margin-right: 0;\n    margin-left: auto;\n`;\n\nexport const RelativeChange = styled.div<{\n    isPositive: boolean;\n}>`\n    grid-area: relativeChange;\n    font-size: 18px;\n    color: ${({isPositive}) => isPositive ? Palette.Positive : Palette.Negative};\n    display: flex;\n    font-family: FiraSans-Medium;\n`;\n\nexport const Change = styled.div<{\n    isPositive: boolean;\n}>`\n    grid-area: change;\n    margin-right: 0;\n    margin-left: auto;\n    color: ${({isPositive}) => isPositive ? Palette.Positive : Palette.Negative};\n`;","import styled from 'styled-components';\nimport Palette from '../../../theme/style';\n\nexport const Content = styled.div`\n    display: flex;\n`;\n\nexport const IdenticalPart = styled.div`\n\n`;\n\nexport const ChangedPart = styled.div`\n    color: ${Palette.Orange};\n`;","import React, { FC, useEffect, useState, createRef } from 'react';\nimport { usePrevious } from 'core/hooks/usePrevious';\nimport { Content, IdenticalPart } from './UpdateHightlight.styled';\nimport Palette from 'theme/style';\n\nexport const RESET_HIGHLIGHT_AFTER_MS = 1500;\n\nexport interface IProps {\n    value?: string | null;\n}\n\nexport const calculateParts = (value: string, prevValue: string) => {\n    if (!value || !prevValue) {\n        return [value, ''];\n    }\n    const length = Math.min(value.length, prevValue.length);\n    let index = 0;\n    for (let i = 0; i < length; i++) {\n        if (value[i] === prevValue[i]) {\n            index++;\n        } else {\n            break;\n        }\n    }\n    return [value.slice(0, index), value.slice(index, value.length)];\n};\n\nconst UpdateHighlight: FC<IProps> = props => {\n    const changedPartRef = createRef<HTMLDivElement>();\n    const { value } = props;\n    const prev = usePrevious(value);\n    const [[identicalPart, changedPart], setParts] = useState<string[]>([]);\n\n    useEffect(() => {\n        setParts(calculateParts(value || '', prev || ''));\n        let animation: Animation | undefined = undefined;\n        if (typeof changedPartRef.current?.animate === 'function') {\n            animation = changedPartRef.current.animate([\n                // keyframes\n                { color: Palette.White },\n                { color: Palette.Orange },\n                { color: Palette.White }\n            ], {\n                duration: 500,\n                iterations: 2\n            });\n        }\n\n        const timeoutId = setTimeout(() => {\n            setParts([value || '', '']);\n            if (animation) {\n                animation.cancel();\n            }\n        }, RESET_HIGHLIGHT_AFTER_MS);\n\n        return () => clearTimeout(timeoutId);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [value]);\n\n    return (\n        <Content>\n            <IdenticalPart>{identicalPart}</IdenticalPart>\n            <div ref={changedPartRef}>{changedPart}</div>\n        </Content>\n    );\n}\n\nexport default UpdateHighlight;","import { useEffect, useRef } from 'react';\n\nexport const usePrevious = (val: any) => {\n    const ref = useRef();\n\n    useEffect(() => {\n        ref.current = val;\n    }, [val]);\n\n    return ref.current;\n}","export type Base = string;\nexport type Counter = string;\n\nexport function parseCurrencyPair(currencyPair: string): [Base, Counter] {\n    if (typeof currencyPair === 'undefined') {\n        return ['', ''];\n    }\n    const base = currencyPair.slice(0, 3);\n    const counter = currencyPair.slice(3);\n    return [base, counter];\n}\n\nexport function formatCurrencyPair(currencyPair: string): string {\n    const [base, counter] = parseCurrencyPair(currencyPair);\n    return [base, counter].join(' / ');\n}","import styled from 'styled-components';\n\nexport const Icon = styled.i`\n    font-size: 16px;\n    line-height: 20px;\n    width: 20px;\n`","import TrendIndicator from './TrendIndicator';\n\nexport default TrendIndicator;","import React, { FC, useEffect, useState } from 'react';\nimport { Icon } from './TrendIndicator.styled';\n\nconst SHOW_ICON_FOR_X_MS = 5000;\n\nexport interface Props {\n    value: number;\n}\n\nconst TrendIndicator: FC<Props> = props => {\n    const { value } = props;\n    const [isHidden, setIsHidden] = useState(true);\n\n    useEffect(() => {\n        setIsHidden(false);\n\n        const timeoutId = setTimeout(() => setIsHidden(true), SHOW_ICON_FOR_X_MS);\n\n        return () => {\n            clearTimeout(timeoutId);\n        }\n    }, [value]);\n\n    const icon = isHidden\n        ? ''\n        : value > 0 \n            ? 'arrow_upward' \n            : value < 0 ? 'arrow_downward' : '';\n\n    return <Icon className=\"material-icons\">{icon}</Icon>;\n};\n\nexport default TrendIndicator;","import React, { FC } from 'react';\nimport { Container, CurrencyPair, Price, RelativeChange, Change } from './Ticker.styled';\nimport UpdateHighlight from 'core/components/update-highlight/UpdateHighlight';\nimport { formatCurrencyPair } from 'modules/reference-data/utils';\nimport TrendIndicator from 'core/components/trend-indicator';\n\nexport interface StateProps {\n    currencyPair: string;\n    lastPrice: number;\n    dailyChange: number;\n    dailyChangeRelative: number;\n    isActive?: boolean;\n}\n\nexport interface DispatchProps {\n    onClick?: () => void;\n}\n\nexport type Props = StateProps & DispatchProps;\n\nconst Ticker: FC<Props> = props => {\n    const { currencyPair, lastPrice, dailyChange, dailyChangeRelative, onClick, isActive } = props;\n    const isPositiveChange = dailyChange > 0;\n    const percentChange = dailyChangeRelative ? dailyChangeRelative * 100 : undefined;\n    return (\n        <Container onClick={onClick} isActive={!!isActive}>\n            <CurrencyPair>{formatCurrencyPair(currencyPair)}</CurrencyPair>\n            <Price><UpdateHighlight value={lastPrice?.toFixed(2)} /></Price>\n            <RelativeChange isPositive={isPositiveChange}>\n                <TrendIndicator value={dailyChangeRelative} />\n                <UpdateHighlight value={percentChange?.toFixed(2)} />\n                {percentChange && '%'}\n            </RelativeChange>\n            <Change isPositive={isPositiveChange}><UpdateHighlight value={dailyChange?.toFixed(2)} /></Change>\n        </Container>\n    );\n}\n\nexport default Ticker;","import Ticker from './Ticker.container';\n\nexport default Ticker;","import { connect } from 'react-redux';\nimport { RootState } from 'modules/root';\nimport { Dispatch } from 'redux';\nimport { SelectionActions } from 'modules/selection/actions';\nimport { getCurrencyPair } from 'modules/selection/selectors';\nimport { getTicker } from './../../selectors';\nimport Ticker, { StateProps, DispatchProps } from './Ticker';\n\nexport interface ContainerProps {\n    currencyPair: string;\n}\n\nconst mapStateToProps = (state: RootState, props: ContainerProps): StateProps => {\n    const { currencyPair } = props;\n    const selectedCurrencyPair = getCurrencyPair(state);\n    const ticker = getTicker(state)(currencyPair);\n    \n    return {\n        lastPrice: ticker?.lastPrice,\n        currencyPair,\n        dailyChangeRelative: ticker?.dailyChangeRelative,\n        dailyChange: ticker?.dailyChange,\n        isActive: selectedCurrencyPair === currencyPair\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: ContainerProps): DispatchProps => {\n    const { currencyPair } = ownProps;\n\n    return {\n        onClick: () => dispatch(SelectionActions.selectCurrencyPair({currencyPair}))\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Ticker);","import React, { FC } from 'react';\nimport { Container } from './Tickers.styled';\nimport Ticker from '../Ticker';\n\nexport interface Props {\n    currencyPairs: string[];\n}\n\nconst Tickers: FC<Props> = props => {\n    const { currencyPairs } = props;\n\n    return (\n        <Container>            \n            {currencyPairs.map(currencyPair => <Ticker key={currencyPair} currencyPair={currencyPair} />)}\n        </Container>\n    )\n}\n\nexport default Tickers;","import Tickers from './Tickers.container';\n\nexport default Tickers;","import { connect } from 'react-redux';\nimport { getCurrencyPairs } from 'modules/reference-data/selectors';\nimport { RootState } from 'modules/root';\nimport Tickers, { Props } from './Tickers';\n\nconst mapStateToProps = (state: RootState): Props => {\n    const currencyPairs = getCurrencyPairs(state);\n    \n    return {\n        currencyPairs\n    };\n}\n\nexport default connect(mapStateToProps)(Tickers);","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    width: 100%;\n    height: 100%;\n`;","import * as Highcharts from 'highcharts/highstock';\nimport Palette from './style';\n\n(Highcharts as any).theme = {\n    colors: ['#2b908f', '#90ee7e', '#f45b5b', '#7798BF', '#aaeeee', '#ff0066',\n        '#eeaaee', '#55BF3B', '#DF5353', '#7798BF', '#aaeeee'],\n    chart: {\n        backgroundColor: {\n            stops: [\n                [0, '#2a2a2b'],\n                [1, '#3e3e40']\n            ]\n        },\n    },\n    xAxis: {\n        labels: {\n            style: {\n                color: '#E0E0E3'\n            }\n        },\n        lineColor: '#707073',\n        minorGridLineColor: '#505053',\n        tickColor: '#707073',\n        title: {\n            style: {\n                color: '#A0A0A3'\n            }\n        }\n    },\n    yAxis: {\n        gridLineColor: Palette.Border,\n        labels: {\n            style: {\n                color: '#E0E0E3'\n            }\n        },\n        lineColor: '#707073',\n        minorGridLineColor: '#505053',\n        tickColor: '#707073',\n        tickWidth: 1,\n        title: {\n            style: {\n                color: '#A0A0A3'\n            }\n        }\n    },\n    tooltip: {\n        borderColor: Palette.Border,\n        backgroundColor: 'rgba(0, 0, 0, 0.85)',\n        style: {\n            color: Palette.White\n        }\n    },\n    plotOptions: {\n        series: {\n            dataLabels: {\n                color: '#F0F0F3',\n                style: {\n                    fontSize: '13px'\n                }\n            },\n            marker: {\n                lineColor: '#333'\n            }\n        },\n        boxplot: {\n            fillColor: '#505053'\n        },\n        candlestick: {\n            lineColor: 'white'\n        },\n        errorbar: {\n            color: 'white'\n        }\n    },\n    legend: {\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n        itemStyle: {\n            color: '#E0E0E3'\n        },\n        itemHoverStyle: {\n            color: '#FFF'\n        },\n        itemHiddenStyle: {\n            color: '#606063'\n        },\n        title: {\n            style: {\n                color: '#C0C0C0'\n            }\n        }\n    },\n    credits: {\n        style: {\n            color: '#666'\n        }\n    },\n    labels: {\n        style: {\n            color: '#707073'\n        }\n    },\n    drilldown: {\n        activeAxisLabelStyle: {\n            color: '#F0F0F3'\n        },\n        activeDataLabelStyle: {\n            color: '#F0F0F3'\n        }\n    },\n    navigation: {\n        buttonOptions: {\n            symbolStroke: '#DDDDDD',\n            theme: {\n                fill: '#505053'\n            }\n        }\n    },\n    // scroll charts\n    rangeSelector: {\n        buttonTheme: {\n            fill: '#505053',\n            stroke: '#000000',\n            style: {\n                color: '#CCC'\n            },\n            states: {\n                hover: {\n                    fill: '#707073',\n                    stroke: '#000000',\n                    style: {\n                        color: 'white'\n                    }\n                },\n                select: {\n                    fill: '#000003',\n                    stroke: '#000000',\n                    style: {\n                        color: 'white'\n                    }\n                }\n            }\n        },\n        inputBoxBorderColor: '#505053',\n        inputStyle: {\n            backgroundColor: '#333',\n            color: 'silver'\n        },\n        labelStyle: {\n            color: 'silver'\n        }\n    },\n    navigator: {\n        handles: {\n            backgroundColor: '#666',\n            borderColor: '#AAA'\n        },\n        outlineColor: '#CCC',\n        maskFill: 'rgba(255,255,255,0.1)',\n        series: {\n            color: '#7798BF',\n            lineColor: '#A6C7ED'\n        },\n        xAxis: {\n            gridLineColor: '#505053'\n        }\n    },\n    scrollbar: {\n        barBackgroundColor: '#808083',\n        barBorderColor: '#808083',\n        buttonArrowColor: '#CCC',\n        buttonBackgroundColor: '#606063',\n        buttonBorderColor: '#606063',\n        rifleColor: '#FFF',\n        trackBackgroundColor: '#404043',\n        trackBorderColor: '#404043'\n    }\n};\n\nHighcharts.setOptions((Highcharts as any).theme);","import React, { FC, useEffect, useState } from 'react';\nimport * as Highcharts from 'highcharts/highstock';\nimport HighchartsReact from 'highcharts-react-official';\nimport { Container } from './CandlesChart.styled';\nimport { Candle } from '../../types/Candle';\nimport { formatCurrencyPair } from 'modules/reference-data/utils';\nimport 'theme/Highstock';\nimport Palette from 'theme/style';\n\nexport interface Props {\n    candles: Candle[];\n    currencyPair?: string;\n}\n\nconst CandlesChart: FC<Props> = props => {\n    const { candles, currencyPair } = props;\n    const [chartOptions, setChartOptions] = useState<Highcharts.Options>({\n        time: {\n            useUTC: false\n        },\n        series: [{\n            type: 'candlestick',\n            data: []\n        }],\n        rangeSelector: {\n            selected: 1,\n            buttons: [{\n                type: 'minute',\n                count: 5,\n                text: '5m'\n            }, {\n                type: 'minute',\n                count: 30,\n                text: '30m'\n            }, {\n                type: 'hour',\n                count: 1,\n                text: '1h'\n            }, {\n                type: 'hour',\n                count: 12,\n                text: '12h'\n            }, {\n                type: 'all',\n                text: 'All'\n            }]\n        },\n    })\n\n    useEffect(() => {\n        if (candles && candles.length > 0) {\n            const data = candles.map(({ timestamp, ...rest }) => ({\n                x: timestamp,\n                ...rest\n            }))\n                .sort((a, b) => a.x - b.x);\n            setChartOptions({\n                series: [{\n                    type: 'candlestick',\n                    name: currencyPair && formatCurrencyPair(currencyPair),\n                    data\n                }],\n                plotOptions: {\n                    candlestick: {\n                        color: Palette.Negative,\n                        upColor: Palette.Positive\n                    }\n                }\n            });\n        }\n\n    }, [candles, currencyPair]);\n\n    return (\n        <Container>\n            <HighchartsReact\n                highcharts={Highcharts}\n                options={chartOptions}\n                constructorType={'stockChart'}\n            />\n        </Container>\n    )\n}\n\nexport default CandlesChart;","import { createSelector } from 'reselect';\nimport { memoize } from 'lodash';\nimport { RootState } from 'modules/root';\n\nconst candlesSelector = (state: RootState) => state.candles;\n\nexport const getCandles = createSelector(\n    candlesSelector,\n    candles => memoize(\n        (symbol: string) => candles[symbol]\n    )\n)\n","import CandlesChart from './CandlesChart.container';\n\nexport default CandlesChart;","import { connect } from 'react-redux';\nimport CandlesChart, { Props } from './CandlesChart';\nimport { RootState } from 'modules/root';\nimport { getCandles } from '../../selectors';\nimport { getCurrencyPair } from 'modules/selection/selectors';\n\nconst mapStateToProps = (state: RootState): Props => {\n    const currencyPair = getCurrencyPair(state);\n    const candles = currencyPair ? getCandles(state)(currencyPair) : [];\n    \n    return {\n        candles,\n        currencyPair\n    };\n}\n\n\nexport default connect(mapStateToProps)(CandlesChart);","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    width: 100%;\n    height: 100%;\n    font-family: FiraSans-Light;\n`;\n","import React, { FC } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport { ColDef } from 'ag-grid-community';\nimport { Container } from './Book.styled';\nimport { Order } from '../../types/Order';\nimport Palette from 'theme/style';\n\nexport interface Props {\n    orders: {bid: Order, ask: Order}[];\n}\n\nconst Book: FC<Props> = props => {\n    const { orders } = props;\n    const columnDefs: ColDef[] = [{\n        headerName: 'Bid Amount',\n        field: 'bid.amount',\n        width: 100,\n        cellStyle: () => ({\n            color: Palette.Bid\n        }),\n    }, {\n        headerName: 'Bid Price',\n        field: 'bid.price',\n        width: 100,\n        cellStyle: () => ({\n            color: Palette.Bid\n        })\n    }, {\n        headerName: 'Ask Price',\n        field: 'ask.price',\n        width: 100,\n        cellStyle: () => ({\n            color: Palette.Ask\n        })\n    }, {\n        headerName: 'Ask Amount',\n        field: 'ask.amount',\n        width: 100,\n        cellStyle: () => ({\n            color: Palette.Ask\n        }),\n        valueFormatter: params => params.value ? Math.abs(params.value).toString() : ''\n    }];\n\n    return (\n        <Container className='ag-theme-balham-dark'>\n            <AgGridReact\n                columnDefs={columnDefs}\n                rowData={orders}\n                deltaRowDataMode={true}\n                getRowNodeId={data => [data.bid?.id, data.ask?.id].join('#')}\n            >\n            </AgGridReact>\n        </Container>\n    );\n}\n\nexport default Book;","import { createSelector } from 'reselect';\nimport { memoize, range, uniq } from 'lodash';\nimport { RootState } from 'modules/root';\nimport { Order } from './types/Order';\n\nconst bookSelector = (state: RootState) => state.book;\n\nexport const getRawBook = createSelector(\n    bookSelector,\n    book => memoize(\n        (symbol: string) => book[symbol]\n    )\n)\n\nexport const getBook = createSelector(\n    bookSelector,\n    book => memoize((symbol: string) => {\n        const rawBook = book[symbol] || [];\n\n        const bids = rawBook\n            .filter(order => order.amount > 0)\n            .sort((a, b) => b.price - a.price);\n        const asks = rawBook\n            .filter(order => order.amount < 0)\n            .sort((a, b) => a.price - b.price);\n\n        const maxDepth = Math.max(bids.length, asks.length);\n\n        return range(maxDepth)\n            .map(depth => {\n                const bid = bids[depth];\n                const ask = asks[depth];\n\n                return {\n                    bid,\n                    ask,\n                    depth\n                };\n            });\n    })\n)\n\nconst getPricePoints = (orders: Order[]) => uniq(orders.map(order => order.price)).sort((a, b) => a - b);\n\nconst computeDepth = (orders: Order[]) => {\n    return (pricePoints: number[], orderFilter: (order: Order, pricePoint: number) => boolean) => {\n        return pricePoints.map(price => {\n            const depth = orders.filter(order => orderFilter(order, price)).reduce((acc, order) => {\n                return acc += Math.abs(order.amount);\n            }, 0);\n            return {\n                price,\n                depth\n            };\n        });\n    }\n}\n\nexport const getDepth = createSelector(\n    bookSelector,\n    book => memoize((symbol: string) => {\n        const t0 = performance.now();\n        const rawBook = book[symbol] || [];\n\n        const bids = rawBook\n            .filter(order => order.amount > 0);\n\n        const asks = rawBook\n            .filter(order => order.amount < 0);\n\n        const bidPrices = getPricePoints(bids);\n        const askPrices = getPricePoints(asks);\n\n        const bidDepth = computeDepth(bids)(bidPrices, (order, pricePoint) => order.price >= pricePoint);\n        const askDepth = computeDepth(asks)(askPrices, (order, pricePoint) => order.price <= pricePoint);\n        const t1 = performance.now();\n        console.log(`${t1 - t0} ms `);\n        return {\n            bids: bidDepth,\n            asks: askDepth\n        };\n    })\n)","import Book from './Book.container';\n\nexport default Book;","import { connect } from 'react-redux';\nimport { RootState } from 'modules/root';\nimport { getCurrencyPair } from 'modules/selection/selectors';\nimport Book, { Props } from './Book'\nimport { getBook } from '../../selectors';\n\nconst mapStateToProps = (state: RootState): Props => {\n    const currencyPair = getCurrencyPair(state);\n    const orders = currencyPair ? getBook(state)(currencyPair) : [];\n\n    return {\n        orders\n    };\n}\n\nexport default connect(mapStateToProps)(Book);","import { useMemo, useEffect, useState } from 'react';\nimport { throttle } from 'lodash';\n\nexport const useThrottleFn = <T extends (...args: any) => any>(\n  fn: T,\n  ms = 1000,\n) => {\n  const throttledFn = useMemo(() => {\n    return throttle(fn, ms);\n  }, [fn, ms]);\n\n  // fn may call setState.\n  useEffect(() => {\n    return () => {\n      throttledFn.cancel();\n    };\n  }, [throttledFn]);\n  return throttledFn;\n};\n\nexport const useThrottle = <T>(value: T, ms = 1000) => {\n    const [throttledValue, setThrottledValue] = useState(value);\n    const setThrottledValueThrottled = useThrottleFn(setThrottledValue, ms);\n    setThrottledValueThrottled(value);\n    return throttledValue;\n  };","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    width: 100%;\n    height: 100%;\n`;\n","import * as Highcharts from 'highcharts';\nimport Palette from './style';\n\n(Highcharts as any).theme = {\n    colors: ['#2b908f', '#90ee7e', '#f45b5b', '#7798BF', '#aaeeee', '#ff0066',\n        '#eeaaee', '#55BF3B', '#DF5353', '#7798BF', '#aaeeee'],\n    chart: {\n        backgroundColor: {\n            stops: [\n                [0, '#2a2a2b'],\n                [1, '#3e3e40']\n            ]\n        },\n    },\n    xAxis: {\n        labels: {\n            style: {\n                color: '#E0E0E3'\n            }\n        },\n        lineColor: '#707073',\n        minorGridLineColor: '#505053',\n        tickColor: '#707073',\n        title: {\n            style: {\n                color: '#A0A0A3'\n            }\n        }\n    },\n    yAxis: {\n        gridLineColor: Palette.Border,\n        labels: {\n            style: {\n                color: '#E0E0E3'\n            }\n        },\n        lineColor: '#707073',\n        minorGridLineColor: '#505053',\n        tickColor: '#707073',\n        tickWidth: 1,\n        title: {\n            style: {\n                color: '#A0A0A3'\n            }\n        }\n    },\n    tooltip: {\n        borderColor: Palette.Border,\n        backgroundColor: 'rgba(0, 0, 0, 0.85)',\n        style: {\n            color: Palette.White\n        }\n    },\n    plotOptions: {\n        series: {\n            dataLabels: {\n                color: '#F0F0F3',\n                style: {\n                    fontSize: '13px'\n                }\n            },\n            marker: {\n                lineColor: '#333'\n            }\n        },\n        boxplot: {\n            fillColor: '#505053'\n        },\n        candlestick: {\n            lineColor: 'white'\n        },\n        errorbar: {\n            color: 'white'\n        }\n    },\n    legend: {\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n        itemStyle: {\n            color: '#E0E0E3'\n        },\n        itemHoverStyle: {\n            color: '#FFF'\n        },\n        itemHiddenStyle: {\n            color: '#606063'\n        },\n        title: {\n            style: {\n                color: '#C0C0C0'\n            }\n        }\n    },\n    credits: {\n        style: {\n            color: '#666'\n        }\n    },\n    labels: {\n        style: {\n            color: '#707073'\n        }\n    },\n    drilldown: {\n        activeAxisLabelStyle: {\n            color: '#F0F0F3'\n        },\n        activeDataLabelStyle: {\n            color: '#F0F0F3'\n        }\n    },\n    navigation: {\n        buttonOptions: {\n            symbolStroke: '#DDDDDD',\n            theme: {\n                fill: '#505053'\n            }\n        }\n    },\n    // scroll charts\n    rangeSelector: {\n        buttonTheme: {\n            fill: '#505053',\n            stroke: '#000000',\n            style: {\n                color: '#CCC'\n            },\n            states: {\n                hover: {\n                    fill: '#707073',\n                    stroke: '#000000',\n                    style: {\n                        color: 'white'\n                    }\n                },\n                select: {\n                    fill: '#000003',\n                    stroke: '#000000',\n                    style: {\n                        color: 'white'\n                    }\n                }\n            }\n        },\n        inputBoxBorderColor: '#505053',\n        inputStyle: {\n            backgroundColor: '#333',\n            color: 'silver'\n        },\n        labelStyle: {\n            color: 'silver'\n        }\n    },\n    navigator: {\n        handles: {\n            backgroundColor: '#666',\n            borderColor: '#AAA'\n        },\n        outlineColor: '#CCC',\n        maskFill: 'rgba(255,255,255,0.1)',\n        series: {\n            color: '#7798BF',\n            lineColor: '#A6C7ED'\n        },\n        xAxis: {\n            gridLineColor: '#505053'\n        }\n    },\n    scrollbar: {\n        barBackgroundColor: '#808083',\n        barBorderColor: '#808083',\n        buttonArrowColor: '#CCC',\n        buttonBackgroundColor: '#606063',\n        buttonBorderColor: '#606063',\n        rifleColor: '#FFF',\n        trackBackgroundColor: '#404043',\n        trackBorderColor: '#404043'\n    }\n};\n\nHighcharts.setOptions((Highcharts as any).theme);","import React, { FC, useState, useEffect } from 'react';\nimport * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { useThrottle } from 'core/hooks/useThrottle';\nimport { Container } from './DepthChart.styled';\nimport Palette from 'theme/style';\nimport 'theme/Highchart';\n\ninterface Depth {\n    bids: {price: number, depth: number}[];\n    asks: {price: number, depth: number}[];\n};\n\nexport interface Props {\n    depth: Depth;\n}\n\nconst DepthChart: FC<Props> = props => {\n    const { depth } = props;\n    const debouncedDepth = useThrottle<Depth>(depth, 1000);\n    const [chartOptions, setChartOptions] = useState<Highcharts.Options>({\n        chart: {\n            type: 'area',\n            animation: false,\n            height: '250px'\n        },\n        title: {\n            text: ''\n        },\n        legend: {\n            enabled: false\n        },\n        series: [{\n            name: 'bids',\n            type: 'area',\n            data: []\n        }, {\n            name: 'asks',\n            type: 'area',\n            data: []\n        }],\n        xAxis: {\n            labels: {\n                autoRotation: false\n            }\n        },\n        yAxis: {\n            title: {\n                text: ''\n            },\n            labels: {\n                enabled: false\n            }\n        },\n        plotOptions: {\n            area: {\n                marker: {\n                    enabled: false,\n                    states: {\n                        hover: {\n                            enabled: false\n                        }\n                    }\n                }\n            }\n        },\n    })\n\n    useEffect(() => {\n        const { bids, asks } = debouncedDepth;\n\n        setChartOptions({\n            xAxis: {\n                categories: [...bids, ...asks].map(order => order.price.toString()),\n                labels: {\n                    step: 5,\n                    formatter: function() {\n                        return Number.parseFloat(this.value.toString()).toFixed(0);\n                    }\n                }\n            },\n            series: [{\n                name: 'bids',\n                type: 'area',\n                data: [\n                    ...bids.map(bid => bid.depth),\n                    ...asks.map(() => null)\n                ],\n                color: Palette.Bid\n            }, {\n                name: 'asks',\n                type: 'area',\n                data: [\n                    ...bids.map(() => null),\n                    ...asks.map(ask => ask.depth)\n                ],\n                color: Palette.Ask\n            }]\n        });\n\n    }, [debouncedDepth]);\n\n    return (\n        <Container>\n            <HighchartsReact\n                highcharts={Highcharts}\n                options={chartOptions}\n                constructorType={'chart'}\n            />\n        </Container>\n    )\n}\n\nexport default DepthChart;","import DepthChart from './DepthChart.container';\n\nexport default DepthChart;","import { connect } from 'react-redux';\nimport { RootState } from 'modules/root';\nimport DepthChart, { Props } from './DepthChart'\nimport { getDepth } from '../../selectors';\nimport { getCurrencyPair } from 'modules/selection/selectors';\n\nconst mapStateToProps = (state: RootState): Props => {\n    const currencyPair = getCurrencyPair(state);\n    const depth = currencyPair ? getDepth(state)(currencyPair) : { bids: [], asks: [] };\n\n    return {\n        depth\n    };\n}\n\nexport default connect(mapStateToProps)(DepthChart);","import styled from 'styled-components';\nimport Palette from 'theme/style';\n\nexport const Container = styled.div`\n    background-color: ${Palette.BackgroundColor};\n    width: 100vw;\n    height: 100vh;\n`;\n\nexport const Content = styled.div`\n    display: grid;\n    grid-template-rows: 40px 80px 1fr 250px;\n    grid-template-columns: 400px 400px 1fr;\n    grid-template-areas: \n        \"header header header\"\n        \"tickers tickers tickers\"\n        \"trades candles candles\"\n        \"trades book depth\";\n    grid-gap: 5px;\n`;\n\nexport const Header = styled.div`\n    grid-area: header;\n    color: ${Palette.White};\n    font-family: FiraSans-MediumItalic;\n    background-color: #2d3436;\n    padding: 0 0 0 10px;\n    font-size: 28px;\n`;\n\nexport const TickersPanel = styled.div`\n    grid-area: tickers;\n    overflow: auto;\n`;\n\nexport const TradesPanel = styled.div`\n    grid-area: trades;\n`;\n\nexport const CandlesPanel = styled.div`\n    grid-area: candles;\n`;\n\nexport const BookPanel = styled.div`\n    grid-area: book;\n`;\n\nexport const DepthPanel = styled.div`\n    grid-area: depth;\n`\n","import React, { useEffect } from 'react';\nimport { Provider } from 'react-redux';\nimport configureStore from './modules/redux/store';\nimport { AppActions } from './modules/app/actions';\nimport Trades from 'modules/trades/components/Trades';\nimport Tickers from 'modules/ticker/components/Tickers';\nimport CandlesChart from 'modules/candles/components/CandlesChart';\nimport Book from 'modules/book/components/Book';\nimport DepthChart from 'modules/book/components/DepthChart';\nimport { Container, Content, Header, TradesPanel, TickersPanel, CandlesPanel, BookPanel, DepthPanel } from 'App.styled';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham-dark.css';\nimport 'theme/fonts.css';\n\nfunction App() {\n  const store = configureStore();\n\n  useEffect(() => {\n    store.dispatch(AppActions.bootstrapApp());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Provider store={store}>\n      <Container>\n        <Content>\n          <Header>Crypto Trader</Header>\n          <TickersPanel><Tickers /></TickersPanel>\n          <TradesPanel><Trades /></TradesPanel>\n          <CandlesPanel><CandlesChart /></CandlesPanel>\n          <BookPanel><Book /></BookPanel>\n          <DepthPanel><DepthChart /></DepthPanel>\n        </Content>\n      </Container>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}